{
  "address": "0xD01587bE8e3f94A416adA7007b824fBe65bDF874",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "externalURL",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltiesRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltiesFeeBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "ConstructContractURIParamsCtor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "royaltiesRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesFeeBasisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructContractURIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "externalURL",
          "type": "string"
        }
      ],
      "name": "TokenURIParamsCtor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructTokenParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "royaltiesRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesFeeBasisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructContractURIParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "contractName",
          "type": "string"
        }
      ],
      "name": "constructContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructTokenParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3045faead1052ba24c91e199b5999c203dfb303557c8c87339845e906953707",
  "receipt": {
    "to": null,
    "from": "0x6120932248DaFbDDb7e97279e10F9348b0E0242c",
    "contractAddress": "0xD01587bE8e3f94A416adA7007b824fBe65bDF874",
    "transactionIndex": 9,
    "gasUsed": "1124160",
    "logsBloom": "0x
    "blockHash": "0x632add24cfe7217cca1cb53dfc29fd4f5d1a540f74399558ad33c30418d457e5",
    "transactionHash": "0xd3045faead1052ba24c91e199b5999c203dfb303557c8c87339845e906953707",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 25985937,
        "transactionHash": "0xd3045faead1052ba24c91e199b5999c203dfb303557c8c87339845e906953707",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006120932248dafbddb7e97279e10f9348b0e0242c",
          "0x000000000000000000000000b95d435df3f8b2a8d8b9c2b7c8766c9ae6ed8cc9"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011e8687eb6275000000000000000000000000000000000000000000000001bcd4b9398750976f6d00000000000000000000000000000000000000000000298b0c518763d014d4b10000000000000000000000000000000000000000000001bcd39ab2ff6534fa6d00000000000000000000000000000000000000000000298b0d700debbb7749b1",
        "logIndex": 28,
        "blockHash": "0x632add24cfe7217cca1cb53dfc29fd4f5d1a540f74399558ad33c30418d457e5"
      }
    ],
    "blockNumber": 25985937,
    "cumulativeGasUsed": "2428199",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "efd4d2f25b5c4191cfaa472a1618023b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"ConstructContractURIParamsCtor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesFeeBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTDescriptor.ConstructContractURIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"name\":\"TokenURIParamsCtor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.ConstructTokenParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesFeeBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTDescriptor.ConstructContractURIParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.ConstructTokenParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    using Strings for uint256;\\n\\n    struct ConstructTokenParams {\\n        uint256 tokenId;\\n        string imageURL;\\n        string animationURL;\\n        string externalURL;\\n    }\\n\\n    struct ConstructContractURIParams {\\n        string imageURL;\\n        string description;\\n        string externalURL;\\n        address royaltiesRecipient;\\n        uint256 royaltiesFeeBasisPoints; // Royalties fee in basis point\\n    }\\n\\n    function TokenURIParamsCtor(\\n        string calldata imageURL,\\n        string calldata animationURL,\\n        string calldata externalURL\\n    ) public pure returns (ConstructTokenParams memory params) {\\n        params.imageURL = imageURL;\\n        params.animationURL = animationURL;\\n        params.externalURL = externalURL;\\n        return params;\\n    }\\n\\n    function ConstructContractURIParamsCtor(\\n        string calldata imageURL,\\n        string calldata description,\\n        string calldata externalURL,\\n        address _royaltiesRecipient,\\n        uint256 _royaltiesFeeBasisPoints\\n    ) public pure returns (ConstructContractURIParams memory params) {\\n        params.imageURL = imageURL;\\n        params.description = description;\\n        params.externalURL = externalURL;\\n        params.royaltiesRecipient = _royaltiesRecipient;\\n        params.royaltiesFeeBasisPoints = _royaltiesFeeBasisPoints; // Royalties fee in basis point\\n        return params;\\n    }\\n\\n    function constructTokenURI(ConstructTokenParams memory params, string memory name) public pure returns (string memory) {\\n        string memory _name = generateName(params.tokenId, name);\\n        string memory description = generateDescription(params.tokenId, name);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                _name,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                description,\\n                                generateExternalUrl(params.externalURL),\\n                                '\\\", \\\"image\\\":\\\"',\\n                                generateImagesLink(params.imageURL, params.animationURL),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function constructContractURI(ConstructContractURIParams memory params, string memory contractName) public pure returns (string memory) {\\n        uint256 sfbp = params.royaltiesFeeBasisPoints;\\n        address feeRecipient = params.royaltiesRecipient;\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                contractName,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                params.description,\\n                                generateExternalUrl(params.externalURL),\\n                                '\\\", \\\"image\\\":\\\"',\\n                                generateImagesLink(params.imageURL, \\\"\\\"),\\n                                '\\\", \\\"seller_fee_basis_points\\\":\\\"',\\n                                sfbp.toString(),\\n                                '\\\", \\\"fee_recipient\\\":\\\"',\\n                                addressToString(feeRecipient),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateExternalUrl(string memory externalURL) internal pure returns (string memory) {\\n        if (bytes(externalURL).length > 0)\\n            return string(abi.encodePacked('\\\", \\\"external_url\\\": \\\"', externalURL));\\n        return \\\"\\\";\\n    }\\n\\n    function generateImagesLink(string memory imageURL, string memory animationURL) internal pure returns (string memory) {\\n        // if animation URL is not set\\n        if (bytes(animationURL).length > 0)\\n            return string(abi.encodePacked(imageURL, '\\\", \\\"animation_url\\\": \\\"', animationURL));\\n        // return only the imageURL\\n        return imageURL;\\n    }\\n\\n    function escapeQuotes(string memory symbol) internal pure returns (string memory) {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint8 quotesCount = 0;\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = \\\"\\\\\\\\\\\";\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function generateDescription(uint256 tokenId, string memory contractName) private pure returns (string memory) {\\n        return string(abi.encodePacked(contractName, \\\" - \\\", tokenId.toString(), unicode\\\"\\u00ba\\\")); // TODO make it binary with \\u00aa\\n    }\\n\\n    function generateName(uint256 tokenId, string memory contractName) private pure returns (string memory) {\\n        return string(abi.encodePacked(contractName, \\\" - \\\", tokenId.toString()));\\n    }\\n\\n    function addressToString(address addr) internal pure returns (string memory) {\\n        return (uint256(uint160(addr))).toHexString(20);\\n    }\\n}\\n\",\"keccak256\":\"0x8ed0d61c1db1c3594243ac03ce1196f30f8fc3351377686a916e46d0636e1848\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61135e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806329e72aaa1461005b5780634a2250d2146100845780636552931b146100975780638bd19343146100b7575b600080fd5b61006e610069366004610b29565b6100d7565b60405161007b9190611069565b60405180910390f35b61006e610092366004610c1b565b610183565b6100aa6100a53660046109e3565b6101e0565b60405161007b9190611132565b6100ca6100c5366004610a79565b6102a3565b60405161007b91906110b1565b60606000836080015190506000846060015190506101598486602001516101018860400151610378565b61011e8960000151604051806020016040528060008152506103bf565b610127876103f9565b6101308761051c565b60405160200161014596959493929190610ecb565b604051602081830303815290604052610532565b6040516020016101699190611024565b604051602081830303815290604052925050505b92915050565b606060006101958460000151846106a7565b905060006101a78560000151856106db565b905061015982826101bb8860600151610378565b6101cd89602001518a604001516103bf565b6040516020016101459493929190610e14565b6101e86108ba565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201919091525050505060408083019190915280516020601f850181900481028201810190925283815290849084908190840183828082843760009201919091525050505060608201529695505050505050565b6102ab6108e2565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f890181900481028201810190925287815290889088908190840183828082843760009201919091525050505060208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201919091525050505060408201526001600160a01b0392909216606083015260808201529695505050505050565b8051606090156103a957816040516020016103939190610fe7565b60405160208183030381529060405290506103ba565b506040805160208101909152600081525b919050565b8051606090156103f25782826040516020016103dc929190610dc4565b604051602081830303815290604052905061017d565b5090919050565b60608161041e57506040805180820190915260018152600360fc1b60208201526103ba565b8160005b8115610448578061043281611277565b91506104419050600a836111e6565b9150610422565b60008167ffffffffffffffff81111561047157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561049b576020820181803683370190505b5090505b8415610514576104b0600183611219565b91506104bd600a86611292565b6104c89060306111ce565b60f81b8183815181106104eb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061050d600a866111e6565b945061049f565b949350505050565b606061017d6001600160a01b03831660146106f8565b606081516000141561055357506040805160208101909152600081526103ba565b60006040518060600160405280604081526020016112e9604091399050600060038451600261058291906111ce565b61058c91906111e6565b6105979060046111fa565b905060006105a68260206111ce565b67ffffffffffffffff8111156105cc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105f6576020820181803683370190505b509050818152600183018586518101602084015b81831015610662576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161060a565b60038951066001811461067c576002811461068d57610699565b613d3d60f01b600119830152610699565b603d60f81b6000198301525b509398975050505050505050565b6060816106b3846103f9565b6040516020016106c4929190610d39565b604051602081830303815290604052905092915050565b6060816106e7846103f9565b6040516020016106c4929190610d77565b606060006107078360026111fa565b6107129060026111ce565b67ffffffffffffffff81111561073857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610762576020820181803683370190505b509050600360fc1b8160008151811061078b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107c857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006107ec8460026111fa565b6107f79060016111ce565b90505b600181111561088b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083957634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061085d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361088481611260565b90506107fa565b5083156108b35760405162461bcd60e51b81526004016108aa9061107c565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001600081525090565b80356001600160a01b03811681146103ba57600080fd5b60008083601f840112610942578081fd5b50813567ffffffffffffffff811115610959578182fd5b60208301915083602082850101111561097157600080fd5b9250929050565b600082601f830112610988578081fd5b813567ffffffffffffffff8111156109a2576109a26112d2565b6109b5601f8201601f191660200161119d565b8181528460208386010111156109c9578283fd5b816020850160208301379081016020019190915292915050565b600080600080600080606087890312156109fb578182fd5b863567ffffffffffffffff80821115610a12578384fd5b610a1e8a838b01610931565b90985096506020890135915080821115610a36578384fd5b610a428a838b01610931565b90965094506040890135915080821115610a5a578384fd5b50610a6789828a01610931565b979a9699509497509295939492505050565b60008060008060008060008060a0898b031215610a94578182fd5b883567ffffffffffffffff80821115610aab578384fd5b610ab78c838d01610931565b909a50985060208b0135915080821115610acf578384fd5b610adb8c838d01610931565b909850965060408b0135915080821115610af3578384fd5b50610b008b828c01610931565b9095509350610b13905060608a0161091a565b9150608089013590509295985092959890939650565b60008060408385031215610b3b578182fd5b823567ffffffffffffffff80821115610b52578384fd5b9084019060a08287031215610b65578384fd5b610b6f60a061119d565b823582811115610b7d578586fd5b610b8988828601610978565b825250602083013582811115610b9d578586fd5b610ba988828601610978565b602083015250604083013582811115610bc0578586fd5b610bcc88828601610978565b604083015250610bde6060840161091a565b606082015260808301356080820152809450506020850135915080821115610c04578283fd5b50610c1185828601610978565b9150509250929050565b60008060408385031215610c2d578182fd5b823567ffffffffffffffff80821115610c44578384fd5b9084019060808287031215610c57578384fd5b610c61608061119d565b82358152602083013582811115610c76578586fd5b610c8288828601610978565b602083015250604083013582811115610c99578586fd5b610ca588828601610978565b604083015250606083013582811115610cbc578586fd5b610cc888828601610978565b60608301525093506020850135915080821115610c04578283fd5b60008151808452610cfb816020860160208601611230565b601f01601f19169290920160200192915050565b60008151610d21818560208601611230565b9290920192915050565b61227d60f01b815260020190565b60008351610d4b818460208801611230565b6201016960ed1b9083019081528351610d6b816003840160208801611230565b01600301949350505050565b60008351610d89818460208801611230565b6201016960ed1b9083019081528351610da9816003840160208801611230565b61615d60f11b60039290910191820152600501949350505050565b60008351610dd6818460208801611230565b741116101130b734b6b0ba34b7b72fbab936111d101160591b9083019081528351610e08816015840160208801611230565b01601501949350505050565b683d913730b6b2911d1160b91b81528451600090610e39816009850160208a01611230565b71111610113232b9b1b934b83a34b7b7111d1160711b6009918401918201528551610e6b81601b840160208a01611230565b8551910190610e8181601b840160208901611230565b6b1116101134b6b0b3b2911d1160a11b601b92909101918201528351610eae816027840160208801611230565b61227d60f01b602792909101918201526029019695505050505050565b683d913730b6b2911d1160b91b81528651600090610ef0816009850160208c01611230565b71111610113232b9b1b934b83a34b7b7111d1160711b6009918401918201528751610f2281601b840160208c01611230565b8751910190610f3881601b840160208b01611230565b6b1116101134b6b0b3b2911d1160a11b601b92909101918201528551610f65816027840160208a01611230565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a220000602792909101918201528451610fa3816045840160208901611230565b73111610113332b2afb932b1b4b834b2b73a111d1160611b60459290910191820152610fda610fd56059830186610d0f565b610d2b565b9998505050505050505050565b731116101132bc3a32b93730b62fbab936111d101160611b81528151600090611017816014850160208701611230565b9190910160140192915050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008252825161105c81601d850160208701611230565b91909101601d0192915050565b6000602082526108b36020830184610ce3565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b600060208252825160a060208401526110cd60c0840182610ce3565b90506020840151601f19808584030160408601526110eb8383610ce3565b92506040860151915080858403016060860152506111098282610ce3565b91505060018060a01b036060850151166080840152608084015160a08401528091505092915050565b6000602082528251602083015260208301516080604084015261115860a0840182610ce3565b90506040840151601f19808584030160608601526111768383610ce3565b92506060860151915080858403016080860152506111948282610ce3565b95945050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156111c6576111c66112d2565b604052919050565b600082198211156111e1576111e16112a6565b500190565b6000826111f5576111f56112bc565b500490565b6000816000190483118215151615611214576112146112a6565b500290565b60008282101561122b5761122b6112a6565b500390565b60005b8381101561124b578181015183820152602001611233565b8381111561125a576000848401525b50505050565b60008161126f5761126f6112a6565b506000190190565b600060001982141561128b5761128b6112a6565b5060010190565b6000826112a1576112a16112bc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202ac23a6bc6645bfbdc1b08f3ae27ba2369bb806049ac30b562de8cafb670d28f64736f6c63430008010033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806329e72aaa1461005b5780634a2250d2146100845780636552931b146100975780638bd19343146100b7575b600080fd5b61006e610069366004610b29565b6100d7565b60405161007b9190611069565b60405180910390f35b61006e610092366004610c1b565b610183565b6100aa6100a53660046109e3565b6101e0565b60405161007b9190611132565b6100ca6100c5366004610a79565b6102a3565b60405161007b91906110b1565b60606000836080015190506000846060015190506101598486602001516101018860400151610378565b61011e8960000151604051806020016040528060008152506103bf565b610127876103f9565b6101308761051c565b60405160200161014596959493929190610ecb565b604051602081830303815290604052610532565b6040516020016101699190611024565b604051602081830303815290604052925050505b92915050565b606060006101958460000151846106a7565b905060006101a78560000151856106db565b905061015982826101bb8860600151610378565b6101cd89602001518a604001516103bf565b6040516020016101459493929190610e14565b6101e86108ba565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201919091525050505060408083019190915280516020601f850181900481028201810190925283815290849084908190840183828082843760009201919091525050505060608201529695505050505050565b6102ab6108e2565b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f890181900481028201810190925287815290889088908190840183828082843760009201919091525050505060208083019190915260408051601f870183900483028101830190915285815290869086908190840183828082843760009201919091525050505060408201526001600160a01b0392909216606083015260808201529695505050505050565b8051606090156103a957816040516020016103939190610fe7565b60405160208183030381529060405290506103ba565b506040805160208101909152600081525b919050565b8051606090156103f25782826040516020016103dc929190610dc4565b604051602081830303815290604052905061017d565b5090919050565b60608161041e57506040805180820190915260018152600360fc1b60208201526103ba565b8160005b8115610448578061043281611277565b91506104419050600a836111e6565b9150610422565b60008167ffffffffffffffff81111561047157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561049b576020820181803683370190505b5090505b8415610514576104b0600183611219565b91506104bd600a86611292565b6104c89060306111ce565b60f81b8183815181106104eb57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061050d600a866111e6565b945061049f565b949350505050565b606061017d6001600160a01b03831660146106f8565b606081516000141561055357506040805160208101909152600081526103ba565b60006040518060600160405280604081526020016112e9604091399050600060038451600261058291906111ce565b61058c91906111e6565b6105979060046111fa565b905060006105a68260206111ce565b67ffffffffffffffff8111156105cc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105f6576020820181803683370190505b509050818152600183018586518101602084015b81831015610662576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161060a565b60038951066001811461067c576002811461068d57610699565b613d3d60f01b600119830152610699565b603d60f81b6000198301525b509398975050505050505050565b6060816106b3846103f9565b6040516020016106c4929190610d39565b604051602081830303815290604052905092915050565b6060816106e7846103f9565b6040516020016106c4929190610d77565b606060006107078360026111fa565b6107129060026111ce565b67ffffffffffffffff81111561073857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610762576020820181803683370190505b509050600360fc1b8160008151811061078b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106107c857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006107ec8460026111fa565b6107f79060016111ce565b90505b600181111561088b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061083957634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061085d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361088481611260565b90506107fa565b5083156108b35760405162461bcd60e51b81526004016108aa9061107c565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b6040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001600081525090565b80356001600160a01b03811681146103ba57600080fd5b60008083601f840112610942578081fd5b50813567ffffffffffffffff811115610959578182fd5b60208301915083602082850101111561097157600080fd5b9250929050565b600082601f830112610988578081fd5b813567ffffffffffffffff8111156109a2576109a26112d2565b6109b5601f8201601f191660200161119d565b8181528460208386010111156109c9578283fd5b816020850160208301379081016020019190915292915050565b600080600080600080606087890312156109fb578182fd5b863567ffffffffffffffff80821115610a12578384fd5b610a1e8a838b01610931565b90985096506020890135915080821115610a36578384fd5b610a428a838b01610931565b90965094506040890135915080821115610a5a578384fd5b50610a6789828a01610931565b979a9699509497509295939492505050565b60008060008060008060008060a0898b031215610a94578182fd5b883567ffffffffffffffff80821115610aab578384fd5b610ab78c838d01610931565b909a50985060208b0135915080821115610acf578384fd5b610adb8c838d01610931565b909850965060408b0135915080821115610af3578384fd5b50610b008b828c01610931565b9095509350610b13905060608a0161091a565b9150608089013590509295985092959890939650565b60008060408385031215610b3b578182fd5b823567ffffffffffffffff80821115610b52578384fd5b9084019060a08287031215610b65578384fd5b610b6f60a061119d565b823582811115610b7d578586fd5b610b8988828601610978565b825250602083013582811115610b9d578586fd5b610ba988828601610978565b602083015250604083013582811115610bc0578586fd5b610bcc88828601610978565b604083015250610bde6060840161091a565b606082015260808301356080820152809450506020850135915080821115610c04578283fd5b50610c1185828601610978565b9150509250929050565b60008060408385031215610c2d578182fd5b823567ffffffffffffffff80821115610c44578384fd5b9084019060808287031215610c57578384fd5b610c61608061119d565b82358152602083013582811115610c76578586fd5b610c8288828601610978565b602083015250604083013582811115610c99578586fd5b610ca588828601610978565b604083015250606083013582811115610cbc578586fd5b610cc888828601610978565b60608301525093506020850135915080821115610c04578283fd5b60008151808452610cfb816020860160208601611230565b601f01601f19169290920160200192915050565b60008151610d21818560208601611230565b9290920192915050565b61227d60f01b815260020190565b60008351610d4b818460208801611230565b6201016960ed1b9083019081528351610d6b816003840160208801611230565b01600301949350505050565b60008351610d89818460208801611230565b6201016960ed1b9083019081528351610da9816003840160208801611230565b61615d60f11b60039290910191820152600501949350505050565b60008351610dd6818460208801611230565b741116101130b734b6b0ba34b7b72fbab936111d101160591b9083019081528351610e08816015840160208801611230565b01601501949350505050565b683d913730b6b2911d1160b91b81528451600090610e39816009850160208a01611230565b71111610113232b9b1b934b83a34b7b7111d1160711b6009918401918201528551610e6b81601b840160208a01611230565b8551910190610e8181601b840160208901611230565b6b1116101134b6b0b3b2911d1160a11b601b92909101918201528351610eae816027840160208801611230565b61227d60f01b602792909101918201526029019695505050505050565b683d913730b6b2911d1160b91b81528651600090610ef0816009850160208c01611230565b71111610113232b9b1b934b83a34b7b7111d1160711b6009918401918201528751610f2281601b840160208c01611230565b8751910190610f3881601b840160208b01611230565b6b1116101134b6b0b3b2911d1160a11b601b92909101918201528551610f65816027840160208a01611230565b7f222c202273656c6c65725f6665655f62617369735f706f696e7473223a220000602792909101918201528451610fa3816045840160208901611230565b73111610113332b2afb932b1b4b834b2b73a111d1160611b60459290910191820152610fda610fd56059830186610d0f565b610d2b565b9998505050505050505050565b731116101132bc3a32b93730b62fbab936111d101160611b81528151600090611017816014850160208701611230565b9190910160140192915050565b60007f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008252825161105c81601d850160208701611230565b91909101601d0192915050565b6000602082526108b36020830184610ce3565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b600060208252825160a060208401526110cd60c0840182610ce3565b90506020840151601f19808584030160408601526110eb8383610ce3565b92506040860151915080858403016060860152506111098282610ce3565b91505060018060a01b036060850151166080840152608084015160a08401528091505092915050565b6000602082528251602083015260208301516080604084015261115860a0840182610ce3565b90506040840151601f19808584030160608601526111768383610ce3565b92506060860151915080858403016080860152506111948282610ce3565b95945050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156111c6576111c66112d2565b604052919050565b600082198211156111e1576111e16112a6565b500190565b6000826111f5576111f56112bc565b500490565b6000816000190483118215151615611214576112146112a6565b500290565b60008282101561122b5761122b6112a6565b500390565b60005b8381101561124b578181015183820152602001611233565b8381111561125a576000848401525b50505050565b60008161126f5761126f6112a6565b506000190190565b600060001982141561128b5761128b6112a6565b5060010190565b6000826112a1576112a16112bc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202ac23a6bc6645bfbdc1b08f3ae27ba2369bb806049ac30b562de8cafb670d28f64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}