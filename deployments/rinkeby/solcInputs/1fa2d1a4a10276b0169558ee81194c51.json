{
  "language": "Solidity",
  "sources": {
    "src/@rarible/royalties/contracts/impl/AbstractRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../LibPart.sol\";\n\nabstract contract AbstractRoyalties {\n    mapping(uint256 => LibPart.Part[]) internal royalties;\n\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\n        uint256 totalValue;\n        for (uint256 i = 0; i < _royalties.length; i++) {\n            require(_royalties[i].account != address(0x0), \"Recipient should be present\");\n            require(_royalties[i].value != 0, \"Royalty value should be positive\");\n            totalValue += _royalties[i].value;\n            royalties[id].push(_royalties[i]);\n        }\n        require(totalValue < 10000, \"Royalty total value should be < 10000\");\n        _onRoyaltiesSet(id, _royalties);\n    }\n\n    function _updateAccount(\n        uint256 _id,\n        address _from,\n        address _to\n    ) internal {\n        uint256 length = royalties[_id].length;\n        for (uint256 i = 0; i < length; i++) {\n            if (royalties[_id][i].account == _from) {\n                royalties[_id][i].account = payable(address(uint160(_to)));\n            }\n        }\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal virtual;\n}\n"
    },
    "src/@rarible/royalties/contracts/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "src/@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./AbstractRoyalties.sol\";\nimport \"../RoyaltiesV2.sol\";\n\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\n    function getRaribleV2Royalties(uint256 id) external view override returns (LibPart.Part[] memory) {\n        return royalties[id];\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal override {\n        emit RoyaltiesSet(id, _royalties);\n    }\n}\n"
    },
    "src/@rarible/royalties/contracts/RoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./LibPart.sol\";\n\ninterface RoyaltiesV2 {\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\n\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\n}\n"
    },
    "src/sl.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"./@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\";\nimport \"./@rarible/royalties/contracts/LibPart.sol\";\nimport \"./@rarible/royalties/contracts/LibRoyaltiesV2.sol\";\nimport \"./NFTDescriptor.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata tokenURI extension only\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataTokenURI {\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\ncontract MIRE is ERC721Upgradeable, RoyaltiesV2Impl, AccessControlUpgradeable {\n    using NFTDescriptor for NFTDescriptor.ConstructTokenParams;\n    using NFTDescriptor for NFTDescriptor.ConstructContractURIParams;\n\n    mapping(uint256 => IERC721MetadataTokenURI) cloneMappingAddress;\n    mapping(uint256 => uint256) cloneMappingId;\n    mapping(uint256 => uint256) cloneMappingValue;\n\n    uint256 mTokenId;\n    NFTDescriptor.ConstructContractURIParams contractMetadata;\n    uint256 public version;\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function init(string memory name, string memory symbol) public initializer {\n        __ERC721_init(name, symbol);\n        __AccessControl_init_unchained();\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        mTokenId = 0;\n        version = 0;\n    }\n\n    function mint(\n        address to,\n        address cloneContract,\n        uint256 cloneId\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        cloneMappingValue[mTokenId] = mTokenId;\n\n        cloneMappingAddress[mTokenId] = IERC721MetadataTokenURI(cloneContract);\n        cloneMappingId[mTokenId] = cloneId;\n\n        _mint(to, mTokenId);\n        if (contractMetadata.royaltiesFeeBasisPoints > 0) {\n            setRoyalties(\n                mTokenId,\n                contractMetadata.royaltiesRecipient,\n                uint96(contractMetadata.royaltiesFeeBasisPoints)\n            );\n        }\n        mTokenId++;\n        //require valid tokenURI (so far length > 0)\n    }\n\n    function updateClone(\n        uint256 tokenId,\n        address _cloneContract,\n        uint256 cloneId\n    ) public {\n        // Reward for cleaning up space\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender())\n        );\n\n        IERC721MetadataTokenURI cloneContract = IERC721MetadataTokenURI(_cloneContract);\n        cloneMappingAddress[tokenId] = cloneContract;\n        cloneMappingId[tokenId] = cloneId;\n\n        bytes memory tokenURIData = bytes(cloneMappingAddress[tokenId].tokenURI(cloneId));\n        require(tokenURIData.length > 0); // check for actual validity of the content\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        return cloneMappingAddress[tokenId].tokenURI(cloneMappingId[tokenId]);\n    }\n\n    // Rarrible & OpenSea roylaties informations\n    function setRoyalties(\n        uint256 _tokenId,\n        address payable _royaltiesReceipientAddress,\n        uint96 _percentageBasisPoints\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        LibPart.Part[] memory _royalties = new LibPart.Part[](1);\n        _royalties[0].value = _percentageBasisPoints;\n        _royalties[0].account = _royaltiesReceipientAddress;\n        _saveRoyalties(_tokenId, _royalties);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Upgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    // OpenSea contract metadata info\n    function contractURI() public view returns (string memory) {\n        return contractMetadata.constructContractURI(name());\n    }\n\n    // Set contract information, royalties and such\n    function setContractURI(NFTDescriptor.ConstructContractURIParams memory params)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        contractMetadata = params;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721Upgradeable, AccessControlUpgradeable)\n        returns (bool)\n    {\n        if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\n            return true;\n        }\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "src/@rarible/royalties/contracts/LibRoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary LibRoyaltiesV2 {\n    /*\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\n}\n"
    },
    "src/NFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"base64-sol/base64.sol\";\n\nlibrary NFTDescriptor {\n    using Strings for uint256;\n\n    struct ConstructTokenParams {\n        uint256 tokenId;\n        string imageURL;\n        string animationURL;\n        string externalURL;\n    }\n\n    struct ConstructContractURIParams {\n        string imageURL;\n        string description;\n        string externalURL;\n        address payable royaltiesRecipient;\n        uint256 royaltiesFeeBasisPoints; // Royalties fee in basis point\n    }\n\n    function TokenURIParamsCtor(\n        string calldata imageURL,\n        string calldata animationURL,\n        string calldata externalURL\n    ) public pure returns (ConstructTokenParams memory params) {\n        params.imageURL = imageURL;\n        params.animationURL = animationURL;\n        params.externalURL = externalURL;\n        return params;\n    }\n\n    function ConstructContractURIParamsCtor(\n        string calldata imageURL,\n        string calldata description,\n        string calldata externalURL,\n        address payable _royaltiesRecipient,\n        uint256 _royaltiesFeeBasisPoints\n    ) public pure returns (ConstructContractURIParams memory params) {\n        params.imageURL = imageURL;\n        params.description = description;\n        params.externalURL = externalURL;\n        params.royaltiesRecipient = _royaltiesRecipient;\n        params.royaltiesFeeBasisPoints = _royaltiesFeeBasisPoints; // Royalties fee in basis point\n        return params;\n    }\n\n    function constructTokenURI(ConstructTokenParams memory params, string memory name)\n        public\n        pure\n        returns (string memory)\n    {\n        string memory _name = generateName(params.tokenId, name);\n        string memory description = generateDescription(params.tokenId, name);\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                _name,\n                                '\", \"description\":\"',\n                                description,\n                                generateExternalUrl(params.externalURL),\n                                '\", \"image\":\"',\n                                generateImagesLink(params.imageURL, params.animationURL),\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function constructContractURI(ConstructContractURIParams memory params, string memory contractName)\n        public\n        pure\n        returns (string memory)\n    {\n        uint256 sfbp = params.royaltiesFeeBasisPoints;\n        address feeRecipient = params.royaltiesRecipient;\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                contractName,\n                                '\", \"description\":\"',\n                                params.description,\n                                generateExternalUrl(params.externalURL),\n                                '\", \"image\":\"',\n                                generateImagesLink(params.imageURL, \"\"),\n                                '\", \"seller_fee_basis_points\":\"',\n                                sfbp.toString(),\n                                '\", \"fee_recipient\":\"',\n                                addressToString(feeRecipient),\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateExternalUrl(string memory externalURL) internal pure returns (string memory) {\n        if (bytes(externalURL).length > 0) return string(abi.encodePacked('\", \"external_url\": \"', externalURL));\n        return \"\";\n    }\n\n    function generateImagesLink(string memory imageURL, string memory animationURL)\n        internal\n        pure\n        returns (string memory)\n    {\n        // if animation URL is not set\n        if (bytes(animationURL).length > 0)\n            return string(abi.encodePacked(imageURL, '\", \"animation_url\": \"', animationURL));\n        // return only the imageURL\n        return imageURL;\n    }\n\n    function escapeQuotes(string memory symbol) internal pure returns (string memory) {\n        bytes memory symbolBytes = bytes(symbol);\n        uint8 quotesCount = 0;\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\n            if (symbolBytes[i] == '\"') {\n                quotesCount++;\n            }\n        }\n        if (quotesCount > 0) {\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\n            uint256 index;\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\n                if (symbolBytes[i] == '\"') {\n                    escapedBytes[index++] = \"\\\\\";\n                }\n                escapedBytes[index++] = symbolBytes[i];\n            }\n            return string(escapedBytes);\n        }\n        return symbol;\n    }\n\n    function generateDescription(uint256 tokenId, string memory contractName) private pure returns (string memory) {\n        return string(abi.encodePacked(contractName, \" - \", tokenId.toString(), unicode\"º\")); // TODO make it binary with ª\n    }\n\n    function generateName(uint256 tokenId, string memory contractName) private pure returns (string memory) {\n        return string(abi.encodePacked(contractName, \" - \", tokenId.toString()));\n    }\n\n    function addressToString(address addr) internal pure returns (string memory) {\n        return (uint256(uint160(addr))).toHexString(20);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/wait.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"base64-sol/base64.sol\";\n\ncontract WAIT {\n    mapping(bytes4 => bool) internal supportedInterfaces;\n\n    function name() public pure returns (string memory) {\n        return \"CARRE\";\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"ROND\";\n    }\n\n    function totalSupply() public pure returns (uint256) {\n        return 2;\n    }\n\n    function genSLSVG() public pure returns (string memory) {\n        return\n            '<?xml version=\\\\\"1.0\\\\\" encoding=\\\\\"iso-8859-1\\\\\"?><svg version=\\\\\"1.1\\\\\" id=\\\\\"Layer_1\\\\\" xmlns=\\\\\"http://www.w3.org/2000/svg\\\\\" xmlns:xlink=\\\\\"http://www.w3.org/1999/xlink\\\\\" x=\\\\\"0px\\\\\" y=\\\\\"0px\\\\\"  width=\\\\\"4170.252px\\\\\" height=\\\\\"2926.944px\\\\\" viewBox=\\\\\"0 0 4170.252 2926.944\\\\\" enable-background=\\\\\"new 0 0 4170.252 2926.944\\\\\"  xml:space=\\\\\"preserve\\\\\"><rect x=\\\\\"0.5\\\\\" y=\\\\\"0.5\\\\\" stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" width=\\\\\"4169.252\\\\\" height=\\\\\"2925.944\\\\\"/><g> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M2098.066,902.925c25.612-9.897,31.319-15.604,65.622-23.743c-6.965-22.74-11.237-45.723-13.205-68.795  v0.001c-5.066-48.315,7.045-136.909,26.885-184.043c0.002,0.001,123.838-159.391,123.838-159.391s-85.678,94.286-142.332,152.527  c-15.249,15.677-34.919,25.839-56.113,29.035C2101.834,655.521,2105.625,807.509,2098.066,902.925z\\\\\"/> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M2183.789,880.662c-33.114,27.288-51.345,53.5-89.266,51.15c-45.835-44.048-9.002-266.385-11.656-283.466  c-50.928-22.756-30.017-295.043-28.313-329.653c-11.221,91.294-33.038,556.061-51.592,587.829  c0.701,0.061,81.263-64.492,76.946,364.648C2089.071,1024.883,2064.66,1024.253,2183.789,880.662z\\\\\"/> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M2298.388,958.664c16.924-17.399,38.755-28.678,62.277-32.224c-2.27-11.521-4.034-69.547-4.321-74.21  c0.554-101.625,2.335-113.858,10.238-217.901c-1.451-31.524,140.964-194.217,157.526-220.802c0,0-97.74,107.56-162.369,174  c-17.396,17.884-39.834,29.477-64.012,33.122c0.678,6.523,2.075,21.283,3.663,38.603c-11.777-6.666-33.506-17.339-92.34-63.861  c25.945,31.141,26.851,97.604-35.928,97.128c8.948,53.448,5.527,108.448-2.854,161.802c41.954,12.802,48.076,23.256,69.796,60.353  c11.097-37.81,34.592-38.173,60.708-46.907c-4.379,36.85-11.901,69.106-22.911,83.278l-137.439,176.901  C2140.421,1127.946,2235.511,1023.303,2298.388,958.664z M2235.9,692.995c38.642-0.341,60.376,34.117,66.334,66.413  c1.976,11.185-0.515,99.849-0.599,100.643C2199.265,860.05,2225.834,758.909,2235.9,692.995z\\\\\"/> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M1998.703,658.396c-27.485-4.144-49.374-17.323-69.149-37.653  c-73.469-75.529-184.579-197.802-184.579-197.802c19.694,31.896,180.556,213.61,178.357,251.258  c12.875,48.614,7.021,108.971,6.248,155.761c-0.987,8.966-2.126,17.715-3.419,26.111c-61.678-4.917-67.237-45.969-64.221-103.259  c1.903-32.071,6.516-127.755,6.974-132.164c-24.177-3.645-46.616-15.238-64.012-33.122c-64.629-66.44-162.369-174-162.369-174  l141.269,181.83c12.341,15.884,20.421,53.869,24.694,95.981c0.079,0.009,0.159,0.019,0.238,0.028  c7.098,72.643,3.274,157.565-9.29,162.599c34.661,10.002,40.408,16.243,62.913,52.149c1.474-11.476,25.682-36.383,62.437-41.644  c-5.037,29.318-12.096,53.424-21.339,65.774l-154.7,206.703c0,0,107.033-122.273,177.807-197.802  c19.05-20.33,38.193-33.509,64.67-37.653C1987.558,761.763,1993.266,712.538,1998.703,658.396z\\\\\"/> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M1731.348,956.736c17.396-17.883,39.834-29.477,64.012-33.122c-4.609-44.349-7.648-96.28-8.059-147.083  l-23.745-27.053l23.978-12.246c0.314-26.53,2.587-56.553,4.529-79.978c-54.653,49.513-80.893-92.274-87.998-117.382  c-0.234,24.143,22.574,195.693,22.574,195.695c0,0-69.821-20.72-72.564-80.386c-3.403-74.035-48.586-280.564-48.789-280.596  c1.807,36.276,27.088,228.238-11.879,240.609c-172.492-139.437-363.293-412.482-363.294-412.483l170.11,254.342  c190.037,263.198-119.865,12.666-119.86,12.672c-0.002-0.002,211.3,232.776,63.427,211.973  c40.583,12.456,92.358,26.596,126.53,52.771c18.623,12.809,31.883,32.697,36.356,55.487  c18.743,95.495-160.803-40.636-160.805-40.637c-0.925,0.011,141.378,149.206,285.952,300.531l-62.843,80.886  c0,0,30.499-33.563,68.686-74.77c146.855,153.705,294.094,307.563,294.094,307.563l-277.261-325.684  C1680.324,1010.115,1707.997,980.742,1731.348,956.736z M1520.182,642.073c13.444,18.635,21.317,54.799,22.358,77.388  c5.239-18.854,11.231-82.125,52.154-71.029c3.469,31.233,17.005,115.033,18.088,146.5  c-84.182-34.243-230.979-165.34-123.691-191.769v0C1478.716,591.482,1502.42,617.453,1520.182,642.073z M1592.892,965.477  c-67.487-89.077-31.661-130.068-31.661-130.067c42.343,23.985,117.041,63.677,124.362,105.256l-22.451-207.792  c38.477-9.303,79.093,35.333,79.523,112.246c6.593,66.447-57.711,136.857-95.145,184.525L1592.892,965.477z\\\\\"/> <path fill=\\\\\"#F2F2F2\\\\\" d=\\\\\"M2515.753,1037.844l-277.26,325.684c0,0,147.239-153.858,294.094-307.563  c38.187,41.207,68.686,74.77,68.686,74.77l-62.843-80.886c144.574-151.325,286.877-300.52,285.952-300.531  c-0.002,0.001-179.548,136.132-160.805,40.637c4.473-22.79,17.733-42.677,36.355-55.488c34.018-26.109,86.136-40.405,126.53-52.77  c-147.873,20.802,63.429-211.976,63.427-211.973c0.005-0.006-309.897,250.526-119.86-12.672l170.11-254.342  c-0.001,0.001-190.802,273.046-363.294,412.483c-38.966-12.371-13.686-204.333-11.879-240.609  c-0.203,0.031-45.386,206.561-48.789,280.596c-2.743,59.665-72.564,80.386-72.564,80.386c0-0.001,22.808-171.552,22.574-195.695  c-7.105,25.108-33.345,166.894-87.998,117.382c8.01,83.528,5.165,185.474-3.298,266.36  C2438.432,934.273,2469.65,994.955,2515.753,1037.844z M2681.174,603.162L2681.174,603.162  c107.246,26.475-39.443,157.464-123.691,191.77c1.083-31.467,14.619-115.267,18.088-146.5  c40.923-11.096,46.915,52.175,52.154,71.029C2627.213,662.937,2667.425,617.417,2681.174,603.162z M2522.747,1029.646  c-37.539-47.923-101.656-117.891-95.144-184.529c0.243-76.612,41.356-121.797,79.522-112.242l-22.451,207.792  c7.343-41.601,82.003-81.255,124.362-105.256C2643.456,876.892,2585.466,964.525,2522.747,1029.646z\\\\\"/></g><rect x=\\\\\"0.25\\\\\" y=\\\\\"1521.164\\\\\" fill=\\\\\"#F2F2F2\\\\\" width=\\\\\"4169.752\\\\\" height=\\\\\"1405.78\\\\\"/><g> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M2098.066,2272.976c25.612-9.897,31.319-15.604,65.622-23.743  c-6.965-22.74-11.237-45.723-13.205-68.795v0.001c-5.066-48.315,7.045-136.909,26.885-184.043  c0.002,0.001,123.838-159.391,123.838-159.391s-85.678,94.286-142.332,152.527c-15.249,15.677-34.919,25.839-56.113,29.035  C2101.834,2025.572,2105.625,2177.559,2098.066,2272.976z\\\\\"/> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M2183.789,2250.713c-33.114,27.288-51.345,53.5-89.266,51.15  c-45.835-44.048-9.002-266.385-11.656-283.466c-50.928-22.756-30.017-295.043-28.313-329.653  c-11.221,91.294-33.038,556.061-51.592,587.829c0.701,0.061,81.263-64.492,76.946,364.648  C2089.071,2394.933,2064.66,2394.304,2183.789,2250.713z\\\\\"/> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M2298.388,2328.714c16.924-17.399,38.755-28.678,62.277-32.224  c-2.27-11.521-4.034-69.547-4.321-74.21c0.554-101.625,2.335-113.858,10.238-217.901  c-1.451-31.524,140.964-194.217,157.526-220.802c0,0-97.74,107.56-162.369,174c-17.396,17.884-39.834,29.477-64.012,33.122  c0.678,6.522,2.075,21.283,3.663,38.603c-11.777-6.666-33.506-17.339-92.34-63.861c25.945,31.141,26.851,97.604-35.928,97.128  c8.948,53.448,5.527,108.448-2.854,161.802c41.954,12.802,48.076,23.256,69.796,60.353c11.097-37.81,34.592-38.173,60.708-46.907  c-4.379,36.85-11.901,69.106-22.911,83.278l-137.439,176.901C2140.421,2497.997,2235.511,2393.353,2298.388,2328.714z   M2235.9,2063.045c38.642-0.341,60.376,34.117,66.334,66.413c1.976,11.185-0.515,99.849-0.599,100.643  C2199.265,2230.101,2225.834,2128.96,2235.9,2063.045z\\\\\"/> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M1998.703,2028.447c-27.485-4.144-49.374-17.323-69.149-37.653  c-73.469-75.529-184.579-197.802-184.579-197.802c19.694,31.896,180.556,213.61,178.357,251.258  c12.875,48.614,7.021,108.971,6.248,155.761c-0.987,8.966-2.126,17.715-3.419,26.111c-61.678-4.917-67.237-45.969-64.221-103.259  c1.903-32.071,6.516-127.755,6.974-132.164c-24.177-3.645-46.616-15.239-64.012-33.122c-64.629-66.44-162.369-174-162.369-174  l141.269,181.83c12.341,15.884,20.421,53.869,24.694,95.981c0.079,0.009,0.159,0.019,0.238,0.028  c7.098,72.643,3.274,157.565-9.29,162.599c34.661,10.002,40.408,16.243,62.913,52.149c1.474-11.476,25.682-36.384,62.437-41.644  c-5.037,29.318-12.096,53.424-21.339,65.773l-154.7,206.703c0,0,107.033-122.273,177.807-197.802  c19.05-20.33,38.193-33.509,64.67-37.653C1987.558,2131.813,1993.266,2082.589,1998.703,2028.447z\\\\\"/> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M1731.348,2326.786c17.396-17.883,39.834-29.477,64.012-33.122  c-4.609-44.349-7.648-96.28-8.059-147.083l-23.745-27.053l23.978-12.246c0.314-26.53,2.587-56.553,4.529-79.978  c-54.653,49.513-80.893-92.274-87.998-117.381c-0.234,24.143,22.574,195.693,22.574,195.695c0,0-69.821-20.72-72.564-80.386  c-3.403-74.035-48.586-280.564-48.789-280.596c1.807,36.276,27.088,228.238-11.879,240.609  c-172.492-139.437-363.293-412.482-363.294-412.483l170.11,254.342c190.037,263.198-119.865,12.666-119.86,12.672  c-0.002-0.002,211.3,232.776,63.427,211.973c40.583,12.457,92.358,26.596,126.53,52.771c18.623,12.809,31.883,32.697,36.356,55.487  c18.743,95.495-160.803-40.636-160.805-40.637c-0.925,0.011,141.378,149.206,285.952,300.531l-62.843,80.886  c0,0,30.499-33.563,68.686-74.771c146.855,153.705,294.094,307.563,294.094,307.563l-277.261-325.684  C1680.324,2380.166,1707.997,2350.792,1731.348,2326.786z M1520.182,2012.124c13.444,18.635,21.317,54.799,22.358,77.388  c5.239-18.854,11.231-82.125,52.154-71.029c3.469,31.233,17.005,115.033,18.088,146.5  c-84.182-34.243-230.979-165.34-123.691-191.769v0C1478.716,1961.533,1502.42,1987.504,1520.182,2012.124z M1592.892,2335.528  c-67.487-89.077-31.661-130.068-31.661-130.067c42.343,23.985,117.041,63.677,124.362,105.256l-22.451-207.792  c38.477-9.303,79.093,35.333,79.523,112.246c6.593,66.447-57.711,136.857-95.145,184.525L1592.892,2335.528z\\\\\"/> <path stroke=\\\\\"#000000\\\\\" stroke-miterlimit=\\\\\"10\\\\\" d=\\\\\"M2515.753,2407.895l-277.26,325.684c0,0,147.239-153.858,294.094-307.563  c38.187,41.207,68.686,74.771,68.686,74.771l-62.843-80.886c144.574-151.324,286.877-300.52,285.952-300.531  c-0.002,0.001-179.548,136.132-160.805,40.637c4.473-22.79,17.733-42.677,36.355-55.488c34.018-26.109,86.136-40.405,126.53-52.77  c-147.873,20.802,63.429-211.976,63.427-211.973c0.005-0.006-309.897,250.526-119.86-12.672l170.11-254.342  c-0.001,0.001-190.802,273.046-363.294,412.483c-38.966-12.371-13.686-204.333-11.879-240.609  c-0.203,0.031-45.386,206.561-48.789,280.596c-2.743,59.665-72.564,80.386-72.564,80.386c0-0.001,22.808-171.552,22.574-195.695  c-7.105,25.108-33.345,166.894-87.998,117.381c8.01,83.528,5.165,185.474-3.298,266.36  C2438.432,2304.324,2469.65,2365.005,2515.753,2407.895z M2681.174,1973.213L2681.174,1973.213  c107.246,26.475-39.443,157.464-123.691,191.77c1.083-31.467,14.619-115.267,18.088-146.5  c40.923-11.096,46.915,52.175,52.154,71.029C2627.213,2032.987,2667.425,1987.468,2681.174,1973.213z M2522.747,2399.696  c-37.539-47.923-101.656-117.891-95.144-184.529c0.243-76.612,41.356-121.797,79.522-112.242l-22.451,207.792  c7.343-41.601,82.003-81.255,124.362-105.256C2643.456,2246.943,2585.466,2334.576,2522.747,2399.696z\\\\\"/></g><g></g><g></g><g></g><g></g><g></g><g></g></svg>';\n    }\n\n    function tokenURI(uint256) public pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name(),\n                                '\", \"description\":\"',\n                                symbol(),\n                                string(abi.encodePacked('\", \"external_url\": \"', \"https://sky-light-sl.com/\")),\n                                '\", \"image\":\"',\n                                string(\n                                    abi.encodePacked(\n                                        genSLSVG(),\n                                        '\", \"animation_url\": \"ipfs://ipfs://QmSFsJE2fvm9PxaUVzSAZySJqmALZLK4EtD67PBmv5wB8t/skylight-chrome-2000x2000.mp4'\n                                    )\n                                ),\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n        return supportedInterfaces[interfaceID];\n    }\n\n    constructor() {\n        // Just to toy with stuff ;-) SL\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\n        supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n        supportedInterfaces[0x780e9d63] = true; // ERC721Enumerable\n        supportedInterfaces[0x8153916a] = true; // ERC721 + 165 (not needed)\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}