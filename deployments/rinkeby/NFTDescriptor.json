{
  "address": "0x7Df058B22e614aCF49E2d687EC3BA2cCDD6DFBc7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "externalURL",
          "type": "string"
        }
      ],
      "name": "TokenURIParamsCtor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructTokenURIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructTokenURIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x67db5688b9ca8ad4ef21bdac38989105bad83fd5a76ab88e634bb6e2a8d87eaf",
  "receipt": {
    "to": null,
    "from": "0x8E9883567De865e9b4195dC6dc96185b2A47D87E",
    "contractAddress": "0x7Df058B22e614aCF49E2d687EC3BA2cCDD6DFBc7",
    "transactionIndex": 24,
    "gasUsed": "1012642",
    "logsBloom": "0x
    "blockHash": "0x5c1bf4ac6a5b3ae34a2b17deb9e614bc7f4a83b57b7ba009ed514855d9811789",
    "transactionHash": "0x67db5688b9ca8ad4ef21bdac38989105bad83fd5a76ab88e634bb6e2a8d87eaf",
    "logs": [],
    "blockNumber": 9630945,
    "cumulativeGasUsed": "8449416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "564266a40003fd4b8fc39d6da63d719e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"name\":\"TokenURIParamsCtor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.ConstructTokenURIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.ConstructTokenURIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    using Strings for uint256;\\n\\n    struct ConstructTokenURIParams {\\n        uint256 tokenId;\\n        string imageURL;\\n        string animationURL;\\n        string externalURL;\\n    }\\n\\n    function TokenURIParamsCtor(\\n        string calldata imageURL,\\n        string calldata animationURL,\\n        string calldata externalURL\\n    ) public pure returns (ConstructTokenURIParams memory params) {\\n        params.imageURL = imageURL;\\n        params.animationURL = animationURL;\\n        params.externalURL = externalURL;\\n        return params;\\n    }\\n\\n    function constructTokenURI(ConstructTokenURIParams memory params) public pure returns (string memory) {\\n        string memory name = generateName(params);\\n        string memory description = generateDescription(params);\\n        //string memory image = Base64.encode(bytes(generateSVGImage(params)));\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                description,\\n                                generateExternalUrl(params),\\n                                '\\\", \\\"image\\\":\\\"',\\n                                generateImagesLink(params),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateExternalUrl(ConstructTokenURIParams memory params) internal pure returns (string memory) {\\n        if (bytes(params.externalURL).length > 0)\\n            return string(abi.encodePacked('\\\", \\\"external_url\\\": \\\"', params.externalURL));\\n        return \\\"\\\";\\n    }\\n\\n    function generateImagesLink(ConstructTokenURIParams memory params) internal pure returns (string memory) {\\n        if (bytes(params.animationURL).length > 0)\\n            return string(abi.encodePacked(params.imageURL, '\\\", \\\"animation_url\\\": \\\"', params.animationURL));\\n        return params.imageURL;\\n    }\\n\\n    function escapeQuotes(string memory symbol) internal pure returns (string memory) {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint8 quotesCount = 0;\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = \\\"\\\\\\\\\\\";\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function generateDescription(ConstructTokenURIParams memory params) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"MIRE SL - Number \\\", params.tokenId.toString()));\\n    }\\n\\n    function generateName(ConstructTokenURIParams memory params) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"MIRE SL - \\\", params.tokenId.toString()));\\n    }\\n\\n    function addressToString(address addr) internal pure returns (string memory) {\\n        return (uint256(uint160(addr))).toHexString(20);\\n    }\\n}\\n\",\"keccak256\":\"0xd1f38fcfde6b9f07685a27a8ca3987b6fb028fa09df054110296a1ce6699f209\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61116e610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80636552931b14610045578063c49917d714610075575b600080fd5b61005f600480360381019061005a9190610822565b6100a5565b60405161006c9190610dad565b60405180910390f35b61008f600480360381019061008a91906108c6565b61019e565b60405161009c9190610d8b565b60405180910390f35b6100ad610677565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081606001819052509695505050505050565b606060006101ab83610220565b905060006101b884610255565b90506101f882826101c88761028a565b6101d1886102dd565b6040516020016101e49493929190610c99565b60405160208183030381529060405261032b565b6040516020016102089190610d69565b60405160208183030381529060405292505050919050565b606061022f82600001516104ca565b60405160200161023f9190610d03565b6040516020818303038152906040529050919050565b606061026482600001516104ca565b6040516020016102749190610d25565b6040516020818303038152906040529050919050565b6060600082606001515111156102c55781606001516040516020016102af9190610d47565b60405160208183030381529060405290506102d8565b6040518060200160405280600081525090505b919050565b60606000826040015151111561031e5781602001518260400151604051602001610308929190610c6a565b6040516020818303038152906040529050610326565b816020015190505b919050565b606060008251141561034e576040518060200160405280600081525090506104c5565b60006040518060600160405280604081526020016110f9604091399050600060036002855161037d9190610e68565b6103879190610ebe565b60046103939190610eef565b905060006020826103a49190610e68565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104155781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610484576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610429565b60038951066001811461049e57600281146104ae576104b9565b613d3d60f01b60028303526104b9565b603d60f81b60018303525b50505050508093505050505b919050565b60606000821415610512576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610672565b600082905060005b6000821461054457808061052d90610fc9565b915050600a8261053d9190610ebe565b915061051a565b60008167ffffffffffffffff811115610586577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105b85781602001600182028036833780820191505090505b5090505b6000851461066b576001826105d19190610f49565b9150600a856105e09190611012565b60306105ec9190610e68565b60f81b818381518110610628577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856106649190610ebe565b94506105bc565b8093505050505b919050565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b60006106b26106ad84610e00565b610dcf565b9050828152602081018484840111156106ca57600080fd5b6106d5848285610f87565b509392505050565b60008083601f8401126106ef57600080fd5b8235905067ffffffffffffffff81111561070857600080fd5b60208301915083600182028301111561072057600080fd5b9250929050565b600082601f83011261073857600080fd5b813561074884826020860161069f565b91505092915050565b60006080828403121561076357600080fd5b61076d6080610dcf565b9050600061077d8482850161080d565b600083015250602082013567ffffffffffffffff81111561079d57600080fd5b6107a984828501610727565b602083015250604082013567ffffffffffffffff8111156107c957600080fd5b6107d584828501610727565b604083015250606082013567ffffffffffffffff8111156107f557600080fd5b61080184828501610727565b60608301525092915050565b60008135905061081c816110e1565b92915050565b6000806000806000806060878903121561083b57600080fd5b600087013567ffffffffffffffff81111561085557600080fd5b61086189828a016106dd565b9650965050602087013567ffffffffffffffff81111561088057600080fd5b61088c89828a016106dd565b9450945050604087013567ffffffffffffffff8111156108ab57600080fd5b6108b789828a016106dd565b92509250509295509295509295565b6000602082840312156108d857600080fd5b600082013567ffffffffffffffff8111156108f257600080fd5b6108fe84828501610751565b91505092915050565b600061091282610e30565b61091c8185610e3b565b935061092c818560208601610f96565b610935816110d0565b840191505092915050565b600061094b82610e30565b6109558185610e4c565b9350610965818560208601610f96565b61096e816110d0565b840191505092915050565b600061098482610e30565b61098e8185610e5d565b935061099e818560208601610f96565b80840191505092915050565b60006109b7600983610e5d565b91507f7b226e616d65223a2200000000000000000000000000000000000000000000006000830152600982019050919050565b60006109f7600a83610e5d565b91507f4d49524520534c202d20000000000000000000000000000000000000000000006000830152600a82019050919050565b6000610a37600c83610e5d565b91507f222c2022696d616765223a2200000000000000000000000000000000000000006000830152600c82019050919050565b6000610a77600283610e5d565b91507f227d0000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000610ab7601283610e5d565b91507f222c20226465736372697074696f6e223a2200000000000000000000000000006000830152601282019050919050565b6000610af7601183610e5d565b91507f4d49524520534c202d204e756d626572200000000000000000000000000000006000830152601182019050919050565b6000610b37601483610e5d565b91507f222c202265787465726e616c5f75726c223a20220000000000000000000000006000830152601482019050919050565b6000610b77601d83610e5d565b91507f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006000830152601d82019050919050565b6000610bb7601583610e5d565b91507f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006000830152601582019050919050565b6000608083016000830151610c026000860182610c5b565b5060208301518482036020860152610c1a8282610940565b91505060408301518482036040860152610c348282610940565b91505060608301518482036060860152610c4e8282610940565b9150508091505092915050565b610c6481610f7d565b82525050565b6000610c768285610979565b9150610c8182610baa565b9150610c8d8284610979565b91508190509392505050565b6000610ca4826109aa565b9150610cb08287610979565b9150610cbb82610aaa565b9150610cc78286610979565b9150610cd38285610979565b9150610cde82610a2a565b9150610cea8284610979565b9150610cf582610a6a565b915081905095945050505050565b6000610d0e826109ea565b9150610d1a8284610979565b915081905092915050565b6000610d3082610aea565b9150610d3c8284610979565b915081905092915050565b6000610d5282610b2a565b9150610d5e8284610979565b915081905092915050565b6000610d7482610b6a565b9150610d808284610979565b915081905092915050565b60006020820190508181036000830152610da58184610907565b905092915050565b60006020820190508181036000830152610dc78184610bea565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610df657610df56110a1565b5b8060405250919050565b600067ffffffffffffffff821115610e1b57610e1a6110a1565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610e7382610f7d565b9150610e7e83610f7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb357610eb2611043565b5b828201905092915050565b6000610ec982610f7d565b9150610ed483610f7d565b925082610ee457610ee3611072565b5b828204905092915050565b6000610efa82610f7d565b9150610f0583610f7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f3e57610f3d611043565b5b828202905092915050565b6000610f5482610f7d565b9150610f5f83610f7d565b925082821015610f7257610f71611043565b5b828203905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610fb4578082015181840152602081019050610f99565b83811115610fc3576000848401525b50505050565b6000610fd482610f7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561100757611006611043565b5b600182019050919050565b600061101d82610f7d565b915061102883610f7d565b92508261103857611037611072565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6110ea81610f7d565b81146110f557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e616979194e29ccacb0cac7494f09342d68cd276d80547409354aa6f8923c49e64736f6c63430008000033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80636552931b14610045578063c49917d714610075575b600080fd5b61005f600480360381019061005a9190610822565b6100a5565b60405161006c9190610dad565b60405180910390f35b61008f600480360381019061008a91906108c6565b61019e565b60405161009c9190610d8b565b60405180910390f35b6100ad610677565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081606001819052509695505050505050565b606060006101ab83610220565b905060006101b884610255565b90506101f882826101c88761028a565b6101d1886102dd565b6040516020016101e49493929190610c99565b60405160208183030381529060405261032b565b6040516020016102089190610d69565b60405160208183030381529060405292505050919050565b606061022f82600001516104ca565b60405160200161023f9190610d03565b6040516020818303038152906040529050919050565b606061026482600001516104ca565b6040516020016102749190610d25565b6040516020818303038152906040529050919050565b6060600082606001515111156102c55781606001516040516020016102af9190610d47565b60405160208183030381529060405290506102d8565b6040518060200160405280600081525090505b919050565b60606000826040015151111561031e5781602001518260400151604051602001610308929190610c6a565b6040516020818303038152906040529050610326565b816020015190505b919050565b606060008251141561034e576040518060200160405280600081525090506104c5565b60006040518060600160405280604081526020016110f9604091399050600060036002855161037d9190610e68565b6103879190610ebe565b60046103939190610eef565b905060006020826103a49190610e68565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104155781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610484576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610429565b60038951066001811461049e57600281146104ae576104b9565b613d3d60f01b60028303526104b9565b603d60f81b60018303525b50505050508093505050505b919050565b60606000821415610512576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610672565b600082905060005b6000821461054457808061052d90610fc9565b915050600a8261053d9190610ebe565b915061051a565b60008167ffffffffffffffff811115610586577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105b85781602001600182028036833780820191505090505b5090505b6000851461066b576001826105d19190610f49565b9150600a856105e09190611012565b60306105ec9190610e68565b60f81b818381518110610628577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856106649190610ebe565b94506105bc565b8093505050505b919050565b6040518060800160405280600081526020016060815260200160608152602001606081525090565b60006106b26106ad84610e00565b610dcf565b9050828152602081018484840111156106ca57600080fd5b6106d5848285610f87565b509392505050565b60008083601f8401126106ef57600080fd5b8235905067ffffffffffffffff81111561070857600080fd5b60208301915083600182028301111561072057600080fd5b9250929050565b600082601f83011261073857600080fd5b813561074884826020860161069f565b91505092915050565b60006080828403121561076357600080fd5b61076d6080610dcf565b9050600061077d8482850161080d565b600083015250602082013567ffffffffffffffff81111561079d57600080fd5b6107a984828501610727565b602083015250604082013567ffffffffffffffff8111156107c957600080fd5b6107d584828501610727565b604083015250606082013567ffffffffffffffff8111156107f557600080fd5b61080184828501610727565b60608301525092915050565b60008135905061081c816110e1565b92915050565b6000806000806000806060878903121561083b57600080fd5b600087013567ffffffffffffffff81111561085557600080fd5b61086189828a016106dd565b9650965050602087013567ffffffffffffffff81111561088057600080fd5b61088c89828a016106dd565b9450945050604087013567ffffffffffffffff8111156108ab57600080fd5b6108b789828a016106dd565b92509250509295509295509295565b6000602082840312156108d857600080fd5b600082013567ffffffffffffffff8111156108f257600080fd5b6108fe84828501610751565b91505092915050565b600061091282610e30565b61091c8185610e3b565b935061092c818560208601610f96565b610935816110d0565b840191505092915050565b600061094b82610e30565b6109558185610e4c565b9350610965818560208601610f96565b61096e816110d0565b840191505092915050565b600061098482610e30565b61098e8185610e5d565b935061099e818560208601610f96565b80840191505092915050565b60006109b7600983610e5d565b91507f7b226e616d65223a2200000000000000000000000000000000000000000000006000830152600982019050919050565b60006109f7600a83610e5d565b91507f4d49524520534c202d20000000000000000000000000000000000000000000006000830152600a82019050919050565b6000610a37600c83610e5d565b91507f222c2022696d616765223a2200000000000000000000000000000000000000006000830152600c82019050919050565b6000610a77600283610e5d565b91507f227d0000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000610ab7601283610e5d565b91507f222c20226465736372697074696f6e223a2200000000000000000000000000006000830152601282019050919050565b6000610af7601183610e5d565b91507f4d49524520534c202d204e756d626572200000000000000000000000000000006000830152601182019050919050565b6000610b37601483610e5d565b91507f222c202265787465726e616c5f75726c223a20220000000000000000000000006000830152601482019050919050565b6000610b77601d83610e5d565b91507f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006000830152601d82019050919050565b6000610bb7601583610e5d565b91507f222c2022616e696d6174696f6e5f75726c223a202200000000000000000000006000830152601582019050919050565b6000608083016000830151610c026000860182610c5b565b5060208301518482036020860152610c1a8282610940565b91505060408301518482036040860152610c348282610940565b91505060608301518482036060860152610c4e8282610940565b9150508091505092915050565b610c6481610f7d565b82525050565b6000610c768285610979565b9150610c8182610baa565b9150610c8d8284610979565b91508190509392505050565b6000610ca4826109aa565b9150610cb08287610979565b9150610cbb82610aaa565b9150610cc78286610979565b9150610cd38285610979565b9150610cde82610a2a565b9150610cea8284610979565b9150610cf582610a6a565b915081905095945050505050565b6000610d0e826109ea565b9150610d1a8284610979565b915081905092915050565b6000610d3082610aea565b9150610d3c8284610979565b915081905092915050565b6000610d5282610b2a565b9150610d5e8284610979565b915081905092915050565b6000610d7482610b6a565b9150610d808284610979565b915081905092915050565b60006020820190508181036000830152610da58184610907565b905092915050565b60006020820190508181036000830152610dc78184610bea565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610df657610df56110a1565b5b8060405250919050565b600067ffffffffffffffff821115610e1b57610e1a6110a1565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610e7382610f7d565b9150610e7e83610f7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eb357610eb2611043565b5b828201905092915050565b6000610ec982610f7d565b9150610ed483610f7d565b925082610ee457610ee3611072565b5b828204905092915050565b6000610efa82610f7d565b9150610f0583610f7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f3e57610f3d611043565b5b828202905092915050565b6000610f5482610f7d565b9150610f5f83610f7d565b925082821015610f7257610f71611043565b5b828203905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610fb4578082015181840152602081019050610f99565b83811115610fc3576000848401525b50505050565b6000610fd482610f7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561100757611006611043565b5b600182019050919050565b600061101d82610f7d565b915061102883610f7d565b92508261103857611037611072565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6110ea81610f7d565b81146110f557600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220e616979194e29ccacb0cac7494f09342d68cd276d80547409354aa6f8923c49e64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}