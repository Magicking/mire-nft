{
  "address": "0x5C61047c1dE99A17727f7E3D3AEFe08522B766D4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "cloneContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cloneId",
          "type": "uint256"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "cloneContract",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "cloneId",
          "type": "uint256[]"
        }
      ],
      "name": "batchUpdateClone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "showerlovers",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cloneContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cloneId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageURL",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalURL",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "royaltiesRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltiesFeeBasisPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructContractURIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "setContractsInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_royaltiesReceipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_percentageBasisPoints",
          "type": "uint96"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_cloneContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cloneId",
          "type": "uint256"
        }
      ],
      "name": "updateClone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67a92cd3b05ed712542db3a0cec0514ed2703211541a6be6e655fdffb7a489a6",
  "receipt": {
    "to": null,
    "from": "0x6120932248DaFbDDb7e97279e10F9348b0E0242c",
    "contractAddress": "0x5C61047c1dE99A17727f7E3D3AEFe08522B766D4",
    "transactionIndex": 72,
    "gasUsed": "2674909",
    "logsBloom": "0x
    "blockHash": "0x8b0f2d9da0cb0e720da57c5530a72bcf4a9ae0762552632ead9fe1caa6406846",
    "transactionHash": "0x67a92cd3b05ed712542db3a0cec0514ed2703211541a6be6e655fdffb7a489a6",
    "logs": [],
    "blockNumber": 14616968,
    "cumulativeGasUsed": "8080495",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "aae616e2dcb68ccfdb2ff51937a6ccc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"cloneContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cloneId\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"cloneContract\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"cloneId\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateClone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"showerlovers\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cloneContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cloneId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalURL\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltiesFeeBasisPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTDescriptor.ConstructContractURIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"setContractsInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_royaltiesReceipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_percentageBasisPoints\",\"type\":\"uint96\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cloneContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cloneId\",\"type\":\"uint256\"}],\"name\":\"updateClone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/sl.sol\":\"MIRE\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ffe9655abbb3741fcb84ad10e2f628d5dbec46b3f84a69ceec4752e807e2757\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x60419df8a675349ad1860a35dbdf3a22fc48f003d99f1fbc5250e75da169f876\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"src/@rarible/royalties/contracts/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xf9fd0d768bdc8ca426790737f8548484573148dd5ed0365c31d98a06ecc0ed5b\",\"license\":\"MIT\"},\"src/@rarible/royalties/contracts/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0x6b5e4a598a06368675f321310643e4bb0a601711dd0484c07750f41bc1ed2999\",\"license\":\"MIT\"},\"src/@rarible/royalties/contracts/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x209acdaf24082cd88ded8211468371a65de5f67713d2d888f1f048d757054d13\",\"license\":\"MIT\"},\"src/@rarible/royalties/contracts/impl/AbstractRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping(uint256 => LibPart.Part[]) internal royalties;\\n\\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\\n        uint256 totalValue;\\n        for (uint256 i = 0; i < _royalties.length; i++) {\\n            require(_royalties[i].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(_royalties[i].value != 0, \\\"Royalty value should be positive\\\");\\n            totalValue += _royalties[i].value;\\n            royalties[id].push(_royalties[i]);\\n        }\\n        require(totalValue < 10000, \\\"Royalty total value should be < 10000\\\");\\n        _onRoyaltiesSet(id, _royalties);\\n    }\\n\\n    function _updateAccount(\\n        uint256 _id,\\n        address _from,\\n        address _to\\n    ) internal {\\n        uint256 length = royalties[_id].length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (royalties[_id][i].account == _from) {\\n                royalties[_id][i].account = payable(address(uint160(_to)));\\n            }\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal virtual;\\n}\\n\",\"keccak256\":\"0xc0411df08df9562737b385caced93ba93d2e701ebaa26279fc0ef20b32983a8c\",\"license\":\"MIT\"},\"src/@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../RoyaltiesV2.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\\n    function getRaribleV2Royalties(uint256 id) external view override returns (LibPart.Part[] memory) {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal override {\\n        emit RoyaltiesSet(id, _royalties);\\n    }\\n}\\n\",\"keccak256\":\"0x8284a39cc42ecac5035bacb0f5bb8dc1a1485b113a3688708346600febe37557\",\"license\":\"MIT\"},\"src/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    using Strings for uint256;\\n\\n    struct ConstructTokenParams {\\n        uint256 tokenId;\\n        string imageURL;\\n        string animationURL;\\n        string externalURL;\\n    }\\n\\n    struct ConstructContractURIParams {\\n        string imageURL;\\n        string description;\\n        string externalURL;\\n        address payable royaltiesRecipient;\\n        uint256 royaltiesFeeBasisPoints; // Royalties fee in basis point\\n    }\\n\\n    function TokenURIParamsCtor(\\n        string calldata imageURL,\\n        string calldata animationURL,\\n        string calldata externalURL\\n    ) public pure returns (ConstructTokenParams memory params) {\\n        params.imageURL = imageURL;\\n        params.animationURL = animationURL;\\n        params.externalURL = externalURL;\\n        return params;\\n    }\\n\\n    function ConstructContractURIParamsCtor(\\n        string calldata imageURL,\\n        string calldata description,\\n        string calldata externalURL,\\n        address payable _royaltiesRecipient,\\n        uint256 _royaltiesFeeBasisPoints\\n    ) public pure returns (ConstructContractURIParams memory params) {\\n        params.imageURL = imageURL;\\n        params.description = description;\\n        params.externalURL = externalURL;\\n        params.royaltiesRecipient = _royaltiesRecipient;\\n        params.royaltiesFeeBasisPoints = _royaltiesFeeBasisPoints; // Royalties fee in basis point\\n        return params;\\n    }\\n\\n    function constructTokenURI(ConstructTokenParams memory params, string memory name)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        string memory _name = generateName(params.tokenId, name);\\n        string memory description = generateDescription(params.tokenId, name);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                _name,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                description,\\n                                generateExternalUrl(params.externalURL),\\n                                '\\\", \\\"image\\\":\\\"',\\n                                generateImagesLink(params.imageURL, params.animationURL),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function constructContractURI(ConstructContractURIParams memory params, string memory contractName)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 sfbp = params.royaltiesFeeBasisPoints;\\n        address feeRecipient = params.royaltiesRecipient;\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"',\\n                    contractName,\\n                    '\\\", \\\"description\\\":\\\"',\\n                    params.description,\\n                    generateExternalUrl(params.externalURL),\\n                    '\\\", \\\"image\\\":\\\"',\\n                    generateImagesLink(params.imageURL, \\\"\\\"),\\n                    '\\\", \\\"seller_fee_basis_points\\\":\\\"',\\n                    sfbp.toString(),\\n                    '\\\", \\\"fee_recipient\\\":\\\"',\\n                    addressToString(feeRecipient),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    function generateExternalUrl(string memory externalURL) internal pure returns (string memory) {\\n        if (bytes(externalURL).length > 0) return string(abi.encodePacked('\\\", \\\"external_url\\\": \\\"', externalURL));\\n        return \\\"\\\";\\n    }\\n\\n    function generateImagesLink(string memory imageURL, string memory animationURL)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // if animation URL is not set\\n        if (bytes(animationURL).length > 0)\\n            return string(abi.encodePacked(imageURL, '\\\", \\\"animation_url\\\": \\\"', animationURL));\\n        // return only the imageURL\\n        return imageURL;\\n    }\\n\\n    function escapeQuotes(string memory symbol) internal pure returns (string memory) {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint8 quotesCount = 0;\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = \\\"\\\\\\\\\\\";\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function generateDescription(uint256 tokenId, string memory contractName) private pure returns (string memory) {\\n        return string(abi.encodePacked(contractName, \\\" - \\\", tokenId.toString(), unicode\\\"\\u00ba\\\")); // TODO make it binary with \\u00aa\\n    }\\n\\n    function generateName(uint256 tokenId, string memory contractName) private pure returns (string memory) {\\n        return string(abi.encodePacked(contractName, \\\" - \\\", tokenId.toString()));\\n    }\\n\\n    function addressToString(address addr) internal pure returns (string memory) {\\n        return (uint256(uint160(addr))).toHexString(20);\\n    }\\n}\\n\",\"keccak256\":\"0x0cbcc97c76d17f7eef186d670cc523ad08ab8e0ba9740a10c40cbe84ebd996ea\",\"license\":\"AGPL-3.0\"},\"src/sl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"./@rarible/royalties/contracts/LibPart.sol\\\";\\nimport \\\"./@rarible/royalties/contracts/LibRoyaltiesV2.sol\\\";\\nimport \\\"./NFTDescriptor.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata tokenURI extension only\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataTokenURI {\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract MIRE is ERC721Upgradeable, RoyaltiesV2Impl, AccessControlUpgradeable {\\n    using NFTDescriptor for NFTDescriptor.ConstructTokenParams;\\n    using NFTDescriptor for NFTDescriptor.ConstructContractURIParams;\\n\\n    mapping(uint256 => IERC721MetadataTokenURI) cloneMappingAddress;\\n    mapping(uint256 => uint256) cloneMappingId;\\n    mapping(uint256 => uint256) cloneMappingValue;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint256 mTokenId;\\n    NFTDescriptor.ConstructContractURIParams contractMetadata;\\n    uint256 public version;\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    function init(string memory name, string memory symbol) public initializer {\\n        __ERC721_init(name, symbol);\\n        __AccessControl_init_unchained();\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        mTokenId = 0;\\n        version = 0;\\n        _name = name;\\n        _symbol = symbol;\\n    }\\n\\n    function migrate(address showerlovers) public {\\n        require(version == 0);\\n        version = 1;\\n        // update minted clones\\n        cloneMappingAddress[0] = cloneMappingAddress[2] = cloneMappingAddress[3] = cloneMappingAddress[4] = cloneMappingAddress[7] = IERC721MetadataTokenURI(showerlovers);\\n        cloneMappingId[0] = 2; // 0xd35b6046dbb75668caf1a69b139c32dce81c2b63\\n        cloneMappingId[2] = 10; // 0x547b4bf7f39fae562d2d0d5cfc329b05ec3694f2\\n        cloneMappingId[3] = 0; // 0x1abae2b8026264e58e28302b1295153cc5166f6d\\n        cloneMappingId[4] = 5; // 0x8772575854f296a0bb9ae95b0fe01473b13b43a3\\n        cloneMappingId[7] = 1; // 0x55c23ff0d59d062c279b4cb715efbfd2fb4b3139\\n        // mint new clones\\n        mint(0x38F1DfdcaF2F0d70c29D4AF6a4AA9E920efe8B18, showerlovers, 3);\\n        mint(0x5AB731b442d168a53f5F82696Ebe99A990FBE1CF, showerlovers, 11);\\n        mint(0x4FAFa51539460F378FF9C2bce4EAf7C628824813, showerlovers, 12);\\n        mint(0x0DC2DA31bA19A1213c4F839a0cd3637d80642817, showerlovers, 8);\\n        mint(0x99a7CF01Fd9aD58f224C9675f3A9e45F294231d9, showerlovers, 7);\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function batchMint(\\n        address[] memory to,\\n        address cloneContract,\\n        uint256 cloneId\\n    ) public {\\n        for (uint256 i = 0; i < to.length; i++) {\\n            mint(to[i], cloneContract, cloneId);\\n        }\\n    }\\n\\n    function mint(\\n        address to,\\n        address cloneContract,\\n        uint256 cloneId\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        cloneMappingValue[mTokenId] = mTokenId;\\n\\n        cloneMappingAddress[mTokenId] = IERC721MetadataTokenURI(cloneContract);\\n        cloneMappingId[mTokenId] = cloneId;\\n\\n        _mint(to, mTokenId);\\n        if (contractMetadata.royaltiesFeeBasisPoints > 0) {\\n            setRoyalties(\\n                mTokenId,\\n                contractMetadata.royaltiesRecipient,\\n                uint96(contractMetadata.royaltiesFeeBasisPoints)\\n            );\\n        }\\n        mTokenId++;\\n        //require valid tokenURI (so far length > 0)\\n    }\\n\\n    function updateClone(\\n        uint256 tokenId,\\n        address _cloneContract,\\n        uint256 cloneId\\n    ) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()));\\n\\n        IERC721MetadataTokenURI cloneContract = IERC721MetadataTokenURI(_cloneContract);\\n        cloneMappingAddress[tokenId] = cloneContract;\\n        cloneMappingId[tokenId] = cloneId;\\n\\n        bytes memory tokenURIData = bytes(cloneMappingAddress[tokenId].tokenURI(cloneId));\\n        require(tokenURIData.length > 0); // check for actual validity of the content\\n    }\\n\\n    function batchUpdateClone(\\n        uint256[] calldata tokenId,\\n        address[] calldata cloneContract,\\n        uint256[] calldata cloneId\\n    ) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()));\\n        for (uint256 i = 0; i < tokenId.length; i++) {\\n            cloneMappingAddress[tokenId[i]] = IERC721MetadataTokenURI(cloneContract[i]);\\n            cloneMappingId[tokenId[i]] = cloneId[i];\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        return cloneMappingAddress[tokenId].tokenURI(cloneMappingId[tokenId]);\\n    }\\n\\n    // Rarrible & OpenSea roylaties informations\\n    function setRoyalties(\\n        uint256 _tokenId,\\n        address payable _royaltiesReceipientAddress,\\n        uint96 _percentageBasisPoints\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        LibPart.Part[] memory _royalties = new LibPart.Part[](1);\\n        _royalties[0].value = _percentageBasisPoints;\\n        _royalties[0].account = _royaltiesReceipientAddress;\\n        _saveRoyalties(_tokenId, _royalties);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    // OpenSea contract metadata info\\n    function contractURI() public view returns (string memory) {\\n        return contractMetadata.constructContractURI(name());\\n    }\\n\\n    // Set contract information, royalties and such\\n    function setContractURI(NFTDescriptor.ConstructContractURIParams memory params)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        contractMetadata = params;\\n    }\\n\\n    // Set contract information, royalties and such\\n    function setContractsInfo(string memory name, string memory symbol) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (bytes(name).length > 0) {\\n            _name = name;\\n        }\\n        if (bytes(symbol).length > 0) {\\n            _symbol = symbol;\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\\n            return true;\\n        }\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf783b04ccf31b76a2566082fb87ad96420be9084f03943f07338b4d87834de93\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612f6b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c806370a082311161010f578063c6c3bbe6116100a2578063d547741f11610071578063d547741f1461040a578063d73e2ab61461041d578063e8a3d48514610430578063e985e9c514610438576101e4565b8063c6c3bbe6146103b1578063c87b56dd146103c4578063cad96cca146103d7578063ce5494bb146103f7576101e4565b8063a217fddf116100de578063a217fddf14610370578063a22cb46514610378578063b7e7fcd71461038b578063b88d4fde1461039e576101e4565b806370a082311461032f57806391d148541461034257806395d89b411461035557806399e598fe1461035d576101e4565b806323b872dd1161018757806342842e0e1161015657806342842e0e146102ee57806354fd4d50146103015780636352211e146103095780637029144c1461031c576101e4565b806323b872dd14610295578063248a9ca3146102a85780632f2ff15d146102c857806336568abe146102db576101e4565b8063081812fc116101c3578063081812fc1461023c578063095ea7b31461025c5780630f8973dd1461026f578063143094db14610282576101e4565b8062817455146101e957806301ffc9a7146101fe57806306fdde0314610227575b600080fd5b6101fc6101f73660046125eb565b61044b565b005b61021161020c3660046123c4565b610532565b60405161021e919061276d565b60405180910390f35b61022f610566565b60405161021e9190612781565b61024f61024a366004612388565b6105f8565b60405161021e9190612709565b6101fc61026a3660046121f9565b610644565b6101fc61027d3660046124d0565b6106dc565b6101fc61029036600461259f565b610775565b6101fc6102a336600461210b565b610841565b6102bb6102b6366004612388565b610879565b60405161021e9190612778565b6101fc6102d63660046123a0565b61088e565b6101fc6102e93660046123a0565b6108ad565b6101fc6102fc36600461210b565b6108f3565b6102bb61090e565b61024f610317366004612388565b610914565b6101fc61032a36600461246f565b610949565b6102bb61033d3660046120b7565b610a1f565b6102116103503660046123a0565b610a63565b61022f610a8e565b6101fc61036b36600461246f565b610a9d565b6102bb610ae7565b6101fc6103863660046121c8565b610aec565b6101fc6103993660046122f2565b610afe565b6101fc6103ac36600461214b565b610c31565b6101fc6103bf36600461210b565b610c6a565b61022f6103d2366004612388565b610d09565b6103ea6103e5366004612388565b610da7565b60405161021e919061275a565b6101fc6104053660046120b7565b610e36565b6101fc6104183660046123a0565b61108e565b6101fc61042b366004612224565b6110ad565b61022f6110fd565b6102116104463660046120d3565b61137a565b61045860006103506113a8565b61046157600080fd5b600083815260ca6020818152604080842080546001600160a01b0319166001600160a01b0388811691909117825560cb8452828620879055939092529054905163c87b56dd60e01b8152859392919091169063c87b56dd906104c7908690600401612778565b60006040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b91908101906123fc565b9050600081511161052b57600080fd5b5050505050565b60006001600160e01b0319821663656cb66560e11b141561055557506001610561565b61055e826113ac565b90505b919050565b606060cd805461057590612e88565b80601f01602080910402602001604051908101604052809291908181526020018280546105a190612e88565b80156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b5050505050905090565b6000610603826113d1565b6106285760405162461bcd60e51b815260040161061f90612b06565b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061064f82610914565b9050806001600160a01b0316836001600160a01b031614156106835760405162461bcd60e51b815260040161061f90612b52565b806001600160a01b03166106956113a8565b6001600160a01b031614806106b157506106b1816104466113a8565b6106cd5760405162461bcd60e51b815260040161061f90612993565b6106d783836113ee565b505050565b60006106ef816106ea6113a8565b61145c565b81518051839160d091610709918391602090910190611f56565b5060208281015180516107229260018501920190611f56565b506040820151805161073e916002840191602090910190611f56565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080909101516004909101555050565b6000610783816106ea6113a8565b604080516001808252818301909252600091816020015b6107a2611fda565b81526020019060019003908161079a57905050905082816000815181106107d957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001906001600160601b031690816001600160601b031681525050838160008151811061081f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b03909116905261052b85826114c0565b61085261084c6113a8565b8261168e565b61086e5760405162461bcd60e51b815260040161061f90612b93565b6106d7838383611713565b60009081526098602052604090206001015490565b61089782610879565b6108a3816106ea6113a8565b6106d78383611846565b6108b56113a8565b6001600160a01b0316816001600160a01b0316146108e55760405162461bcd60e51b815260040161061f90612cab565b6108ef82826118cd565b5050565b6106d783838360405180602001604052806000815250610c31565b60d55481565b6000818152606760205260408120546001600160a01b03168061055e5760405162461bcd60e51b815260040161061f90612a3a565b600054610100900460ff166109645760005460ff161561096c565b61096c611952565b6109885760405162461bcd60e51b815260040161061f90612a83565b600054610100900460ff161580156109b3576000805460ff1961ff0019909116610100171660011790555b6109bd8383611963565b6109c5611994565b6109d760006109d26113a8565b6119bd565b600060cf81905560d55582516109f49060cd906020860190611f56565b508151610a089060ce906020850190611f56565b5080156106d7576000805461ff0019169055505050565b60006001600160a01b038216610a475760405162461bcd60e51b815260040161061f906129f0565b506001600160a01b031660009081526068602052604090205490565b60009182526098602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ce805461057590612e88565b6000610aab816106ea6113a8565b825115610ac7578251610ac59060cd906020860190611f56565b505b8151156106d7578151610ae19060ce906020850190611f56565b50505050565b600081565b6108ef610af76113a8565b83836119c7565b610b0b60006103506113a8565b610b1457600080fd5b60005b85811015610c2857848482818110610b3f57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b5491906120b7565b60ca6000898985818110610b7857634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828282818110610bd157634e487b7160e01b600052603260045260246000fd5b9050602002013560cb6000898985818110610bfc57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055508080610c2090612ec3565b915050610b17565b50505050505050565b610c42610c3c6113a8565b8361168e565b610c5e5760405162461bcd60e51b815260040161061f90612b93565b610ae184848484611a6a565b6000610c78816106ea6113a8565b60cf8054600081815260cc602090815260408083209390935560ca815282822080546001600160a01b0319166001600160a01b0389161790558354825260cb90522083905554610cc9908590611a9d565b60d45415610cee5760cf5460d35460d454610cee92916001600160a01b031690610775565b60cf8054906000610cfe83612ec3565b919050555050505050565b600081815260ca602090815260408083205460cb9092529182902054915163c87b56dd60e01b81526060926001600160a01b039092169163c87b56dd91610d539190600401612778565b60006040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055e91908101906123fc565b606060976000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e2b57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101610ddc565b505050509050919050565b60d55415610e4357600080fd5b600160d58190557f836809a9a1d92e47630736a0eff3cf7db3f517f89d73d8eb4e24cb5bc94a4fb480546001600160a01b0384166001600160a01b031991821681179092557f3cb08e0198dd2c78e3fcd4789c6d528ab55f482b453e6724440a0ff8dfa784aa80548216831790557f5b7646a6db03b87b9d4aa3a43bf0d95244ac4dd0ccad01a658e934c15d17266580548216831790557fe0b86fdc737c0cfd301a36ced403fb76310e3742e00d1a38c7c46a1f09f3411b80548216831790557f992e0e3e7050db88ec37ec33505f46a9813ea5551fe17ef58dc201344bcbaf938054909116909117905560cb60205260027f4239c2c8c3d9b94feb214b0f54d7c869ce1ceb63517be57644336cda4967a46855600a7f2c278fda8778553b7b7a8cff03a9beadbef1773abb49c1f69c87347759480d595560007f3f771ad337758d100996e4f4ea4b0371b93c9bfb5e077c0267534f8d2606ee4081905560057f322b60245ba380edff02ea0cd22c8f465b6af4c34230f7ec556b48e58b4dbdde55600790527f3e42edbfd6234f6af5f08f54b91b5ee6e57b7871c8f584e01ab126b94df64c5c5561100b7338f1dfdcaf2f0d70c29d4af6a4aa9e920efe8b18826003610c6a565b61102b735ab731b442d168a53f5f82696ebe99a990fbe1cf82600b610c6a565b61104b734fafa51539460f378ff9c2bce4eaf7c62882481382600c610c6a565b61106b730dc2da31ba19a1213c4f839a0cd3637d80642817826008610c6a565b61108b7399a7cf01fd9ad58f224c9675f3a9e45f294231d9826007610c6a565b50565b61109782610879565b6110a3816106ea6113a8565b6106d783836118cd565b60005b8351811015610ae1576110eb8482815181106110dc57634e487b7160e01b600052603260045260246000fd5b60200260200101518484610c6a565b806110f581612ec3565b9150506110b0565b606060d06040518060a001604052908160008201805461111c90612e88565b80601f016020809104026020016040519081016040528092919081815260200182805461114890612e88565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b505050505081526020016001820180546111ae90612e88565b80601f01602080910402602001604051908101604052809291908181526020018280546111da90612e88565b80156112275780601f106111fc57610100808354040283529160200191611227565b820191906000526020600020905b81548152906001019060200180831161120a57829003601f168201915b5050505050815260200160028201805461124090612e88565b80601f016020809104026020016040519081016040528092919081815260200182805461126c90612e88565b80156112b95780601f1061128e576101008083540402835291602001916112b9565b820191906000526020600020905b81548152906001019060200180831161129c57829003601f168201915b505050918352505060038201546001600160a01b031660208201526004909101546040909101527309a6CB3B1a6651bc2aFA8248e1513B12211bDA7B906329e72aaa90611304610566565b6040518363ffffffff1660e01b8152600401611321929190612cfa565b60006040518083038186803b15801561133957600080fd5b505af415801561134d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261137591908101906123fc565b905090565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3390565b60006001600160e01b03198216637965db0b60e01b148061055e575061055e82611b84565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061142382610914565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6114668282610a63565b6108ef5761147e816001600160a01b03166014611bc4565b611489836020611bc4565b60405160200161149a929190612694565b60408051601f198184030181529082905262461bcd60e51b825261061f91600401612781565b6000805b82518110156116625760006001600160a01b03168382815181106114f857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316141561152b5760405162461bcd60e51b815260040161061f90612c74565b82818151811061154b57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160601b0316600014156115805760405162461bcd60e51b815260040161061f9061295e565b8281815181106115a057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160601b0316826115c09190612df7565b9150609760008581526020019081526020016000208382815181106115f557634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b0319909216919091179092169190911790558061165a81612ec3565b9150506114c4565b5061271081106116845760405162461bcd60e51b815260040161061f90612be4565b6106d78383611d7d565b6000611699826113d1565b6116b55760405162461bcd60e51b815260040161061f90612912565b60006116c083610914565b9050806001600160a01b0316846001600160a01b031614806116fb5750836001600160a01b03166116f0846105f8565b6001600160a01b0316145b8061170b575061170b818561137a565b949350505050565b826001600160a01b031661172682610914565b6001600160a01b03161461174c5760405162461bcd60e51b815260040161061f9061281b565b6001600160a01b0382166117725760405162461bcd60e51b815260040161061f90612897565b61177d838383611dba565b6117886000826113ee565b6001600160a01b03831660009081526068602052604081208054600192906117b1908490612e2e565b90915550506001600160a01b03821660009081526068602052604081208054600192906117df908490612df7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46106d78383836106d7565b6118508282610a63565b6108ef5760008281526098602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118896113a8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118d78282610a63565b156108ef5760008281526098602090815260408083206001600160a01b03851684529091529020805460ff1916905561190e6113a8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061195d30611dc5565b15905090565b600054610100900460ff1661198a5760405162461bcd60e51b815260040161061f90612c29565b6108ef8282611dd4565b600054610100900460ff166119bb5760405162461bcd60e51b815260040161061f90612c29565b565b6108ef8282611846565b816001600160a01b0316836001600160a01b031614156119f95760405162461bcd60e51b815260040161061f906128db565b6001600160a01b038381166000818152606a602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611a5d90859061276d565b60405180910390a3505050565b611a75848484611713565b611a8184848484611e22565b610ae15760405162461bcd60e51b815260040161061f906127c9565b6001600160a01b038216611ac35760405162461bcd60e51b815260040161061f90612ad1565b611acc816113d1565b15611ae95760405162461bcd60e51b815260040161061f90612860565b611af560008383611dba565b6001600160a01b0382166000908152606860205260408120805460019290611b1e908490612df7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46108ef600083836106d7565b60006001600160e01b031982166380ac58cd60e01b1480611bb557506001600160e01b03198216635b5e139f60e01b145b8061055e575061055e82611f3d565b60606000611bd3836002612e0f565b611bde906002612df7565b67ffffffffffffffff811115611c0457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c2e576020820181803683370190505b509050600360fc1b81600081518110611c5757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c9457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611cb8846002612e0f565b611cc3906001612df7565b90505b6001811115611d57576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d0557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611d2957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611d5081612e71565b9050611cc6565b508315611d765760405162461bcd60e51b815260040161061f90612794565b9392505050565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051611dae929190612d85565b60405180910390a15050565b6106d78383836106d7565b6001600160a01b03163b151590565b600054610100900460ff16611dfb5760405162461bcd60e51b815260040161061f90612c29565b8151611e0e906065906020850190611f56565b5080516106d7906066906020840190611f56565b6000611e36846001600160a01b0316611dc5565b15611f3257836001600160a01b031663150b7a02611e526113a8565b8786866040518563ffffffff1660e01b8152600401611e74949392919061271d565b602060405180830381600087803b158015611e8e57600080fd5b505af1925050508015611ebe575060408051601f3d908101601f19168201909252611ebb918101906123e0565b60015b611f18573d808015611eec576040519150601f19603f3d011682016040523d82523d6000602084013e611ef1565b606091505b508051611f105760405162461bcd60e51b815260040161061f906127c9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061170b565b506001949350505050565b6001600160e01b031981166301ffc9a760e01b14919050565b828054611f6290612e88565b90600052602060002090601f016020900481019282611f845760008555611fca565b82601f10611f9d57805160ff1916838001178555611fca565b82800160010185558215611fca579182015b82811115611fca578251825591602001919060010190611faf565b50611fd6929150611ff1565b5090565b604080518082019091526000808252602082015290565b5b80821115611fd65760008155600101611ff2565b600061201961201484612dcf565b612d9e565b905082815283838301111561202d57600080fd5b828260208301376000602084830101529392505050565b803561056181612f0a565b60008083601f840112612060578182fd5b50813567ffffffffffffffff811115612077578182fd5b602083019150836020808302850101111561209157600080fd5b9250929050565b600082601f8301126120a8578081fd5b611d7683833560208501612006565b6000602082840312156120c8578081fd5b8135611d7681612f0a565b600080604083850312156120e5578081fd5b82356120f081612f0a565b9150602083013561210081612f0a565b809150509250929050565b60008060006060848603121561211f578081fd5b833561212a81612f0a565b9250602084013561213a81612f0a565b929592945050506040919091013590565b60008060008060808587031215612160578081fd5b843561216b81612f0a565b9350602085013561217b81612f0a565b925060408501359150606085013567ffffffffffffffff81111561219d578182fd5b8501601f810187136121ad578182fd5b6121bc87823560208401612006565b91505092959194509250565b600080604083850312156121da578182fd5b82356121e581612f0a565b915060208301358015158114612100578182fd5b6000806040838503121561220b578182fd5b823561221681612f0a565b946020939093013593505050565b600080600060608486031215612238578081fd5b833567ffffffffffffffff8082111561224f578283fd5b818601915086601f830112612262578283fd5b813560208282111561227657612276612ef4565b8082029250612286818401612d9e565b8281528181019085830185870184018c10156122a0578788fd5b8796505b848710156122ce57803595506122b986612f0a565b858352600196909601959183019183016122a4565b5097506122de9050888201612044565b955050505050604084013590509250925092565b6000806000806000806060878903121561230a578384fd5b863567ffffffffffffffff80821115612321578586fd5b61232d8a838b0161204f565b90985096506020890135915080821115612345578586fd5b6123518a838b0161204f565b90965094506040890135915080821115612369578384fd5b5061237689828a0161204f565b979a9699509497509295939492505050565b600060208284031215612399578081fd5b5035919050565b600080604083850312156123b2578182fd5b82359150602083013561210081612f0a565b6000602082840312156123d5578081fd5b8135611d7681612f1f565b6000602082840312156123f1578081fd5b8151611d7681612f1f565b60006020828403121561240d578081fd5b815167ffffffffffffffff811115612423578182fd5b8201601f81018413612433578182fd5b805161244161201482612dcf565b818152856020838501011115612455578384fd5b612466826020830160208601612e45565b95945050505050565b60008060408385031215612481578182fd5b823567ffffffffffffffff80821115612498578384fd5b6124a486838701612098565b935060208501359150808211156124b9578283fd5b506124c685828601612098565b9150509250929050565b6000602082840312156124e1578081fd5b813567ffffffffffffffff808211156124f8578283fd5b9083019060a0828603121561250b578283fd5b61251560a0612d9e565b823582811115612523578485fd5b61252f87828601612098565b825250602083013582811115612543578485fd5b61254f87828601612098565b602083015250604083013582811115612566578485fd5b61257287828601612098565b60408301525061258460608401612044565b60608201526080830135608082015280935050505092915050565b6000806000606084860312156125b3578081fd5b8335925060208401356125c581612f0a565b915060408401356001600160601b03811681146125e0578182fd5b809150509250925092565b6000806000606084860312156125ff578081fd5b83359250602084013561213a81612f0a565b6000815180845260208085019450808401835b8381101561265d57815180516001600160a01b031688528301516001600160601b03168388015260409096019590820190600101612624565b509495945050505050565b60008151808452612680816020860160208601612e45565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516126cc816017850160208801612e45565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126fd816028840160208801612e45565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061275090830184612668565b9695505050505050565b600060208252611d766020830184612611565b901515815260200190565b90815260200190565b600060208252611d766020830184612668565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f526f79616c74792076616c75652073686f756c6420626520706f736974697665604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526025908201527f526f79616c747920746f74616c2076616c75652073686f756c64206265203c20604082015264031303030360dc1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601b908201527f526563697069656e742073686f756c642062652070726573656e740000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600060408252835160a06040840152612d1660e0840182612668565b90506020850151603f1980858403016060860152612d348383612668565b9250604087015191508085840301608086015250612d528282612668565b60608701516001600160a01b031660a0860152608087015160c08601528481036020860152915061246690508185612668565b60008382526040602083015261170b6040830184612611565b604051601f8201601f1916810167ffffffffffffffff81118282101715612dc757612dc7612ef4565b604052919050565b600067ffffffffffffffff821115612de957612de9612ef4565b50601f01601f191660200190565b60008219821115612e0a57612e0a612ede565b500190565b6000816000190483118215151615612e2957612e29612ede565b500290565b600082821015612e4057612e40612ede565b500390565b60005b83811015612e60578181015183820152602001612e48565b83811115610ae15750506000910152565b600081612e8057612e80612ede565b506000190190565b600281046001821680612e9c57607f821691505b60208210811415612ebd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ed757612ed7612ede565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461108b57600080fd5b6001600160e01b03198116811461108b57600080fdfea264697066735822122088b3185c165b01109b54fc188503d7f934ed71b90ff26162b5190acdfa9477f364736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c806370a082311161010f578063c6c3bbe6116100a2578063d547741f11610071578063d547741f1461040a578063d73e2ab61461041d578063e8a3d48514610430578063e985e9c514610438576101e4565b8063c6c3bbe6146103b1578063c87b56dd146103c4578063cad96cca146103d7578063ce5494bb146103f7576101e4565b8063a217fddf116100de578063a217fddf14610370578063a22cb46514610378578063b7e7fcd71461038b578063b88d4fde1461039e576101e4565b806370a082311461032f57806391d148541461034257806395d89b411461035557806399e598fe1461035d576101e4565b806323b872dd1161018757806342842e0e1161015657806342842e0e146102ee57806354fd4d50146103015780636352211e146103095780637029144c1461031c576101e4565b806323b872dd14610295578063248a9ca3146102a85780632f2ff15d146102c857806336568abe146102db576101e4565b8063081812fc116101c3578063081812fc1461023c578063095ea7b31461025c5780630f8973dd1461026f578063143094db14610282576101e4565b8062817455146101e957806301ffc9a7146101fe57806306fdde0314610227575b600080fd5b6101fc6101f73660046125eb565b61044b565b005b61021161020c3660046123c4565b610532565b60405161021e919061276d565b60405180910390f35b61022f610566565b60405161021e9190612781565b61024f61024a366004612388565b6105f8565b60405161021e9190612709565b6101fc61026a3660046121f9565b610644565b6101fc61027d3660046124d0565b6106dc565b6101fc61029036600461259f565b610775565b6101fc6102a336600461210b565b610841565b6102bb6102b6366004612388565b610879565b60405161021e9190612778565b6101fc6102d63660046123a0565b61088e565b6101fc6102e93660046123a0565b6108ad565b6101fc6102fc36600461210b565b6108f3565b6102bb61090e565b61024f610317366004612388565b610914565b6101fc61032a36600461246f565b610949565b6102bb61033d3660046120b7565b610a1f565b6102116103503660046123a0565b610a63565b61022f610a8e565b6101fc61036b36600461246f565b610a9d565b6102bb610ae7565b6101fc6103863660046121c8565b610aec565b6101fc6103993660046122f2565b610afe565b6101fc6103ac36600461214b565b610c31565b6101fc6103bf36600461210b565b610c6a565b61022f6103d2366004612388565b610d09565b6103ea6103e5366004612388565b610da7565b60405161021e919061275a565b6101fc6104053660046120b7565b610e36565b6101fc6104183660046123a0565b61108e565b6101fc61042b366004612224565b6110ad565b61022f6110fd565b6102116104463660046120d3565b61137a565b61045860006103506113a8565b61046157600080fd5b600083815260ca6020818152604080842080546001600160a01b0319166001600160a01b0388811691909117825560cb8452828620879055939092529054905163c87b56dd60e01b8152859392919091169063c87b56dd906104c7908690600401612778565b60006040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b91908101906123fc565b9050600081511161052b57600080fd5b5050505050565b60006001600160e01b0319821663656cb66560e11b141561055557506001610561565b61055e826113ac565b90505b919050565b606060cd805461057590612e88565b80601f01602080910402602001604051908101604052809291908181526020018280546105a190612e88565b80156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b5050505050905090565b6000610603826113d1565b6106285760405162461bcd60e51b815260040161061f90612b06565b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061064f82610914565b9050806001600160a01b0316836001600160a01b031614156106835760405162461bcd60e51b815260040161061f90612b52565b806001600160a01b03166106956113a8565b6001600160a01b031614806106b157506106b1816104466113a8565b6106cd5760405162461bcd60e51b815260040161061f90612993565b6106d783836113ee565b505050565b60006106ef816106ea6113a8565b61145c565b81518051839160d091610709918391602090910190611f56565b5060208281015180516107229260018501920190611f56565b506040820151805161073e916002840191602090910190611f56565b5060608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080909101516004909101555050565b6000610783816106ea6113a8565b604080516001808252818301909252600091816020015b6107a2611fda565b81526020019060019003908161079a57905050905082816000815181106107d957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001906001600160601b031690816001600160601b031681525050838160008151811061081f57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b03909116905261052b85826114c0565b61085261084c6113a8565b8261168e565b61086e5760405162461bcd60e51b815260040161061f90612b93565b6106d7838383611713565b60009081526098602052604090206001015490565b61089782610879565b6108a3816106ea6113a8565b6106d78383611846565b6108b56113a8565b6001600160a01b0316816001600160a01b0316146108e55760405162461bcd60e51b815260040161061f90612cab565b6108ef82826118cd565b5050565b6106d783838360405180602001604052806000815250610c31565b60d55481565b6000818152606760205260408120546001600160a01b03168061055e5760405162461bcd60e51b815260040161061f90612a3a565b600054610100900460ff166109645760005460ff161561096c565b61096c611952565b6109885760405162461bcd60e51b815260040161061f90612a83565b600054610100900460ff161580156109b3576000805460ff1961ff0019909116610100171660011790555b6109bd8383611963565b6109c5611994565b6109d760006109d26113a8565b6119bd565b600060cf81905560d55582516109f49060cd906020860190611f56565b508151610a089060ce906020850190611f56565b5080156106d7576000805461ff0019169055505050565b60006001600160a01b038216610a475760405162461bcd60e51b815260040161061f906129f0565b506001600160a01b031660009081526068602052604090205490565b60009182526098602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ce805461057590612e88565b6000610aab816106ea6113a8565b825115610ac7578251610ac59060cd906020860190611f56565b505b8151156106d7578151610ae19060ce906020850190611f56565b50505050565b600081565b6108ef610af76113a8565b83836119c7565b610b0b60006103506113a8565b610b1457600080fd5b60005b85811015610c2857848482818110610b3f57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b5491906120b7565b60ca6000898985818110610b7857634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828282818110610bd157634e487b7160e01b600052603260045260246000fd5b9050602002013560cb6000898985818110610bfc57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055508080610c2090612ec3565b915050610b17565b50505050505050565b610c42610c3c6113a8565b8361168e565b610c5e5760405162461bcd60e51b815260040161061f90612b93565b610ae184848484611a6a565b6000610c78816106ea6113a8565b60cf8054600081815260cc602090815260408083209390935560ca815282822080546001600160a01b0319166001600160a01b0389161790558354825260cb90522083905554610cc9908590611a9d565b60d45415610cee5760cf5460d35460d454610cee92916001600160a01b031690610775565b60cf8054906000610cfe83612ec3565b919050555050505050565b600081815260ca602090815260408083205460cb9092529182902054915163c87b56dd60e01b81526060926001600160a01b039092169163c87b56dd91610d539190600401612778565b60006040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261055e91908101906123fc565b606060976000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610e2b57600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b90046001600160601b031681830152825260019092019101610ddc565b505050509050919050565b60d55415610e4357600080fd5b600160d58190557f836809a9a1d92e47630736a0eff3cf7db3f517f89d73d8eb4e24cb5bc94a4fb480546001600160a01b0384166001600160a01b031991821681179092557f3cb08e0198dd2c78e3fcd4789c6d528ab55f482b453e6724440a0ff8dfa784aa80548216831790557f5b7646a6db03b87b9d4aa3a43bf0d95244ac4dd0ccad01a658e934c15d17266580548216831790557fe0b86fdc737c0cfd301a36ced403fb76310e3742e00d1a38c7c46a1f09f3411b80548216831790557f992e0e3e7050db88ec37ec33505f46a9813ea5551fe17ef58dc201344bcbaf938054909116909117905560cb60205260027f4239c2c8c3d9b94feb214b0f54d7c869ce1ceb63517be57644336cda4967a46855600a7f2c278fda8778553b7b7a8cff03a9beadbef1773abb49c1f69c87347759480d595560007f3f771ad337758d100996e4f4ea4b0371b93c9bfb5e077c0267534f8d2606ee4081905560057f322b60245ba380edff02ea0cd22c8f465b6af4c34230f7ec556b48e58b4dbdde55600790527f3e42edbfd6234f6af5f08f54b91b5ee6e57b7871c8f584e01ab126b94df64c5c5561100b7338f1dfdcaf2f0d70c29d4af6a4aa9e920efe8b18826003610c6a565b61102b735ab731b442d168a53f5f82696ebe99a990fbe1cf82600b610c6a565b61104b734fafa51539460f378ff9c2bce4eaf7c62882481382600c610c6a565b61106b730dc2da31ba19a1213c4f839a0cd3637d80642817826008610c6a565b61108b7399a7cf01fd9ad58f224c9675f3a9e45f294231d9826007610c6a565b50565b61109782610879565b6110a3816106ea6113a8565b6106d783836118cd565b60005b8351811015610ae1576110eb8482815181106110dc57634e487b7160e01b600052603260045260246000fd5b60200260200101518484610c6a565b806110f581612ec3565b9150506110b0565b606060d06040518060a001604052908160008201805461111c90612e88565b80601f016020809104026020016040519081016040528092919081815260200182805461114890612e88565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b505050505081526020016001820180546111ae90612e88565b80601f01602080910402602001604051908101604052809291908181526020018280546111da90612e88565b80156112275780601f106111fc57610100808354040283529160200191611227565b820191906000526020600020905b81548152906001019060200180831161120a57829003601f168201915b5050505050815260200160028201805461124090612e88565b80601f016020809104026020016040519081016040528092919081815260200182805461126c90612e88565b80156112b95780601f1061128e576101008083540402835291602001916112b9565b820191906000526020600020905b81548152906001019060200180831161129c57829003601f168201915b505050918352505060038201546001600160a01b0316602082015260049091015460409091015273__$9185f4f4d5ccf565a43404fb3be44cd50b$__906329e72aaa90611304610566565b6040518363ffffffff1660e01b8152600401611321929190612cfa565b60006040518083038186803b15801561133957600080fd5b505af415801561134d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261137591908101906123fc565b905090565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3390565b60006001600160e01b03198216637965db0b60e01b148061055e575061055e82611b84565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061142382610914565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6114668282610a63565b6108ef5761147e816001600160a01b03166014611bc4565b611489836020611bc4565b60405160200161149a929190612694565b60408051601f198184030181529082905262461bcd60e51b825261061f91600401612781565b6000805b82518110156116625760006001600160a01b03168382815181106114f857634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b0316141561152b5760405162461bcd60e51b815260040161061f90612c74565b82818151811061154b57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160601b0316600014156115805760405162461bcd60e51b815260040161061f9061295e565b8281815181106115a057634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160601b0316826115c09190612df7565b9150609760008581526020019081526020016000208382815181106115f557634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529282902081519301805491909201516001600160601b0316600160a01b026001600160a01b039384166001600160a01b0319909216919091179092169190911790558061165a81612ec3565b9150506114c4565b5061271081106116845760405162461bcd60e51b815260040161061f90612be4565b6106d78383611d7d565b6000611699826113d1565b6116b55760405162461bcd60e51b815260040161061f90612912565b60006116c083610914565b9050806001600160a01b0316846001600160a01b031614806116fb5750836001600160a01b03166116f0846105f8565b6001600160a01b0316145b8061170b575061170b818561137a565b949350505050565b826001600160a01b031661172682610914565b6001600160a01b03161461174c5760405162461bcd60e51b815260040161061f9061281b565b6001600160a01b0382166117725760405162461bcd60e51b815260040161061f90612897565b61177d838383611dba565b6117886000826113ee565b6001600160a01b03831660009081526068602052604081208054600192906117b1908490612e2e565b90915550506001600160a01b03821660009081526068602052604081208054600192906117df908490612df7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a46106d78383836106d7565b6118508282610a63565b6108ef5760008281526098602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118896113a8565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6118d78282610a63565b156108ef5760008281526098602090815260408083206001600160a01b03851684529091529020805460ff1916905561190e6113a8565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600061195d30611dc5565b15905090565b600054610100900460ff1661198a5760405162461bcd60e51b815260040161061f90612c29565b6108ef8282611dd4565b600054610100900460ff166119bb5760405162461bcd60e51b815260040161061f90612c29565b565b6108ef8282611846565b816001600160a01b0316836001600160a01b031614156119f95760405162461bcd60e51b815260040161061f906128db565b6001600160a01b038381166000818152606a602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611a5d90859061276d565b60405180910390a3505050565b611a75848484611713565b611a8184848484611e22565b610ae15760405162461bcd60e51b815260040161061f906127c9565b6001600160a01b038216611ac35760405162461bcd60e51b815260040161061f90612ad1565b611acc816113d1565b15611ae95760405162461bcd60e51b815260040161061f90612860565b611af560008383611dba565b6001600160a01b0382166000908152606860205260408120805460019290611b1e908490612df7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46108ef600083836106d7565b60006001600160e01b031982166380ac58cd60e01b1480611bb557506001600160e01b03198216635b5e139f60e01b145b8061055e575061055e82611f3d565b60606000611bd3836002612e0f565b611bde906002612df7565b67ffffffffffffffff811115611c0457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c2e576020820181803683370190505b509050600360fc1b81600081518110611c5757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611c9457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611cb8846002612e0f565b611cc3906001612df7565b90505b6001811115611d57576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d0557634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611d2957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611d5081612e71565b9050611cc6565b508315611d765760405162461bcd60e51b815260040161061f90612794565b9392505050565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051611dae929190612d85565b60405180910390a15050565b6106d78383836106d7565b6001600160a01b03163b151590565b600054610100900460ff16611dfb5760405162461bcd60e51b815260040161061f90612c29565b8151611e0e906065906020850190611f56565b5080516106d7906066906020840190611f56565b6000611e36846001600160a01b0316611dc5565b15611f3257836001600160a01b031663150b7a02611e526113a8565b8786866040518563ffffffff1660e01b8152600401611e74949392919061271d565b602060405180830381600087803b158015611e8e57600080fd5b505af1925050508015611ebe575060408051601f3d908101601f19168201909252611ebb918101906123e0565b60015b611f18573d808015611eec576040519150601f19603f3d011682016040523d82523d6000602084013e611ef1565b606091505b508051611f105760405162461bcd60e51b815260040161061f906127c9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061170b565b506001949350505050565b6001600160e01b031981166301ffc9a760e01b14919050565b828054611f6290612e88565b90600052602060002090601f016020900481019282611f845760008555611fca565b82601f10611f9d57805160ff1916838001178555611fca565b82800160010185558215611fca579182015b82811115611fca578251825591602001919060010190611faf565b50611fd6929150611ff1565b5090565b604080518082019091526000808252602082015290565b5b80821115611fd65760008155600101611ff2565b600061201961201484612dcf565b612d9e565b905082815283838301111561202d57600080fd5b828260208301376000602084830101529392505050565b803561056181612f0a565b60008083601f840112612060578182fd5b50813567ffffffffffffffff811115612077578182fd5b602083019150836020808302850101111561209157600080fd5b9250929050565b600082601f8301126120a8578081fd5b611d7683833560208501612006565b6000602082840312156120c8578081fd5b8135611d7681612f0a565b600080604083850312156120e5578081fd5b82356120f081612f0a565b9150602083013561210081612f0a565b809150509250929050565b60008060006060848603121561211f578081fd5b833561212a81612f0a565b9250602084013561213a81612f0a565b929592945050506040919091013590565b60008060008060808587031215612160578081fd5b843561216b81612f0a565b9350602085013561217b81612f0a565b925060408501359150606085013567ffffffffffffffff81111561219d578182fd5b8501601f810187136121ad578182fd5b6121bc87823560208401612006565b91505092959194509250565b600080604083850312156121da578182fd5b82356121e581612f0a565b915060208301358015158114612100578182fd5b6000806040838503121561220b578182fd5b823561221681612f0a565b946020939093013593505050565b600080600060608486031215612238578081fd5b833567ffffffffffffffff8082111561224f578283fd5b818601915086601f830112612262578283fd5b813560208282111561227657612276612ef4565b8082029250612286818401612d9e565b8281528181019085830185870184018c10156122a0578788fd5b8796505b848710156122ce57803595506122b986612f0a565b858352600196909601959183019183016122a4565b5097506122de9050888201612044565b955050505050604084013590509250925092565b6000806000806000806060878903121561230a578384fd5b863567ffffffffffffffff80821115612321578586fd5b61232d8a838b0161204f565b90985096506020890135915080821115612345578586fd5b6123518a838b0161204f565b90965094506040890135915080821115612369578384fd5b5061237689828a0161204f565b979a9699509497509295939492505050565b600060208284031215612399578081fd5b5035919050565b600080604083850312156123b2578182fd5b82359150602083013561210081612f0a565b6000602082840312156123d5578081fd5b8135611d7681612f1f565b6000602082840312156123f1578081fd5b8151611d7681612f1f565b60006020828403121561240d578081fd5b815167ffffffffffffffff811115612423578182fd5b8201601f81018413612433578182fd5b805161244161201482612dcf565b818152856020838501011115612455578384fd5b612466826020830160208601612e45565b95945050505050565b60008060408385031215612481578182fd5b823567ffffffffffffffff80821115612498578384fd5b6124a486838701612098565b935060208501359150808211156124b9578283fd5b506124c685828601612098565b9150509250929050565b6000602082840312156124e1578081fd5b813567ffffffffffffffff808211156124f8578283fd5b9083019060a0828603121561250b578283fd5b61251560a0612d9e565b823582811115612523578485fd5b61252f87828601612098565b825250602083013582811115612543578485fd5b61254f87828601612098565b602083015250604083013582811115612566578485fd5b61257287828601612098565b60408301525061258460608401612044565b60608201526080830135608082015280935050505092915050565b6000806000606084860312156125b3578081fd5b8335925060208401356125c581612f0a565b915060408401356001600160601b03811681146125e0578182fd5b809150509250925092565b6000806000606084860312156125ff578081fd5b83359250602084013561213a81612f0a565b6000815180845260208085019450808401835b8381101561265d57815180516001600160a01b031688528301516001600160601b03168388015260409096019590820190600101612624565b509495945050505050565b60008151808452612680816020860160208601612e45565b601f01601f19169290920160200192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516126cc816017850160208801612e45565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516126fd816028840160208801612e45565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061275090830184612668565b9695505050505050565b600060208252611d766020830184612611565b901515815260200190565b90815260200190565b600060208252611d766020830184612668565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f526f79616c74792076616c75652073686f756c6420626520706f736974697665604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526025908201527f526f79616c747920746f74616c2076616c75652073686f756c64206265203c20604082015264031303030360dc1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601b908201527f526563697069656e742073686f756c642062652070726573656e740000000000604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b600060408252835160a06040840152612d1660e0840182612668565b90506020850151603f1980858403016060860152612d348383612668565b9250604087015191508085840301608086015250612d528282612668565b60608701516001600160a01b031660a0860152608087015160c08601528481036020860152915061246690508185612668565b60008382526040602083015261170b6040830184612611565b604051601f8201601f1916810167ffffffffffffffff81118282101715612dc757612dc7612ef4565b604052919050565b600067ffffffffffffffff821115612de957612de9612ef4565b50601f01601f191660200190565b60008219821115612e0a57612e0a612ede565b500190565b6000816000190483118215151615612e2957612e29612ede565b500290565b600082821015612e4057612e40612ede565b500390565b60005b83811015612e60578181015183820152602001612e48565b83811115610ae15750506000910152565b600081612e8057612e80612ede565b506000190190565b600281046001821680612e9c57607f821691505b60208210811415612ebd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ed757612ed7612ede565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461108b57600080fd5b6001600160e01b03198116811461108b57600080fdfea264697066735822122088b3185c165b01109b54fc188503d7f934ed71b90ff26162b5190acdfa9477f364736f6c63430008010033",
  "libraries": {
    "NFTDescriptor": "0x09a6CB3B1a6651bc2aFA8248e1513B12211bDA7B"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 408,
        "contract": "src/sl.sol:MIRE",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 411,
        "contract": "src/sl.sol:MIRE",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1811,
        "contract": "src/sl.sol:MIRE",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2058,
        "contract": "src/sl.sol:MIRE",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 504,
        "contract": "src/sl.sol:MIRE",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 506,
        "contract": "src/sl.sol:MIRE",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 510,
        "contract": "src/sl.sol:MIRE",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 514,
        "contract": "src/sl.sol:MIRE",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 518,
        "contract": "src/sl.sol:MIRE",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 524,
        "contract": "src/sl.sol:MIRE",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1365,
        "contract": "src/sl.sol:MIRE",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2459,
        "contract": "src/sl.sol:MIRE",
        "label": "royalties",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)2401_storage)dyn_storage)"
      },
      {
        "astId": 39,
        "contract": "src/sl.sol:MIRE",
        "label": "_roles",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 327,
        "contract": "src/sl.sol:MIRE",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3458,
        "contract": "src/sl.sol:MIRE",
        "label": "cloneMappingAddress",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_contract(IERC721MetadataTokenURI)3439)"
      },
      {
        "astId": 3462,
        "contract": "src/sl.sol:MIRE",
        "label": "cloneMappingId",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3466,
        "contract": "src/sl.sol:MIRE",
        "label": "cloneMappingValue",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3468,
        "contract": "src/sl.sol:MIRE",
        "label": "_name",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 3470,
        "contract": "src/sl.sol:MIRE",
        "label": "_symbol",
        "offset": 0,
        "slot": "206",
        "type": "t_string_storage"
      },
      {
        "astId": 3472,
        "contract": "src/sl.sol:MIRE",
        "label": "mTokenId",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 3475,
        "contract": "src/sl.sol:MIRE",
        "label": "contractMetadata",
        "offset": 0,
        "slot": "208",
        "type": "t_struct(ConstructContractURIParams)2671_storage"
      },
      {
        "astId": 3477,
        "contract": "src/sl.sol:MIRE",
        "label": "version",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Part)2401_storage)dyn_storage": {
        "base": "t_struct(Part)2401_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721MetadataTokenURI)3439": {
        "encoding": "inplace",
        "label": "contract IERC721MetadataTokenURI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Part)2401_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibPart.Part[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Part)2401_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_contract(IERC721MetadataTokenURI)3439)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract IERC721MetadataTokenURI)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC721MetadataTokenURI)3439"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ConstructContractURIParams)2671_storage": {
        "encoding": "inplace",
        "label": "struct NFTDescriptor.ConstructContractURIParams",
        "members": [
          {
            "astId": 2662,
            "contract": "src/sl.sol:MIRE",
            "label": "imageURL",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2664,
            "contract": "src/sl.sol:MIRE",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2666,
            "contract": "src/sl.sol:MIRE",
            "label": "externalURL",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2668,
            "contract": "src/sl.sol:MIRE",
            "label": "royaltiesRecipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 2670,
            "contract": "src/sl.sol:MIRE",
            "label": "royaltiesFeeBasisPoints",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Part)2401_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 2398,
            "contract": "src/sl.sol:MIRE",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 2400,
            "contract": "src/sl.sol:MIRE",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "src/sl.sol:MIRE",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "src/sl.sol:MIRE",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}